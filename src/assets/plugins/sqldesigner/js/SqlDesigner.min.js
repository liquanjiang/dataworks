var OZ = {
    $: function (x) {
        return typeof (x) == 'string' ? document.getElementById(x) : x;
    },
    select: function (x) {
        return document.querySelectorAll(x);
    },
    opera: !!window.opera,
    ie: !!document.attachEvent && !window.opera,
    gecko: !!document.getAnonymousElementByAttribute,
    webkit: !!navigator.userAgent.match(/webkit/i),
    khtml: !!navigator.userAgent.match(/khtml/i) || !!navigator.userAgent.match(/konqueror/i),
    Event: {
        _id: 0, _byName: {}, _byID: {}, add: function (elm, event, cb) {
            var id = OZ.Event._id++;
            var element = OZ.$(elm);
            var fnc = (element && element.attachEvent ? function () {
                return cb.apply(element, arguments);
            } : cb);
            var rec = [ element, event, fnc ];
            var parts = event.split(' ');
            while (parts.length) {
                var e = parts.pop();
                if (element) {
                    if (element.addEventListener) {
                        element.addEventListener(e, fnc, false);
                    } else {
                        if (element.attachEvent) {
                            element.attachEvent('on' + e, fnc);
                        }
                    }
                }
                if (!(e in OZ.Event._byName)) {
                    OZ.Event._byName[ e ] = {};
                }
                OZ.Event._byName[ e ][ id ] = rec;
            }
            OZ.Event._byID[ id ] = rec;
            return id;
        }, remove: function (id) {
            var rec = OZ.Event._byID[ id ];
            if (!rec) {
                return;
            }
            var elm = rec[ 0 ];
            var parts = rec[ 1 ].split(' ');
            while (parts.length) {
                var e = parts.pop();
                if (elm) {
                    if (elm.removeEventListener) {
                        elm.removeEventListener(e, rec[ 2 ], false);
                    } else {
                        if (elm.detachEvent) {
                            elm.detachEvent('on' + e, rec[ 2 ]);
                        }
                    }
                }
                delete OZ.Event._byName[ e ][ id ];
            }
            delete OZ.Event._byID[ id ];
        }, stop: function (e) {
            e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
        }, prevent: function (e) {
            e.preventDefault ? e.preventDefault() : e.returnValue = false;
        }, target: function (e) {
            return e.target || e.srcElement;
        }
    },
    Class: function () {
        var c = function () {
            var init = arguments.callee.prototype.init;
            if (init) {
                init.apply(this, arguments);
            }
        };
        c.implement = function (parent) {
            for (var p in parent.prototype) {
                this.prototype[ p ] = parent.prototype[ p ];
            }
            return this;
        };
        c.extend = function (parent) {
            var tmp = function () {
            };
            tmp.prototype = parent.prototype;
            this.prototype = new tmp();
            this.prototype.constructor = this;
            return this;
        };
        c.prototype.bind = function (fnc) {
            return fnc.bind(this);
        };
        c.prototype.dispatch = function (type, data) {
            var obj = { type: type, target: this, timeStamp: (new Date()).getTime(), data: data };
            var tocall = [];
            var list = OZ.Event._byName[ type ];
            for (var id in list) {
                var item = list[ id ];
                if (!item[ 0 ] || item[ 0 ] == this) {
                    tocall.push(item[ 2 ]);
                }
            }
            var len = tocall.length;
            for (var i = 0; i < len; i++) {
                tocall[ i ](obj);
            }
        };
        return c;
    },
    DOM: {
        elm: function (name, opts) {
            var elm = document.createElement(name);
            for (var p in opts) {
                var val = opts[ p ];
                if (p == 'class') {
                    p = 'className';
                }
                if (p in elm) {
                    elm[ p ] = val;
                }
            }
            OZ.Style.set(elm, opts);
            if (opts && opts[ 'title' ]) {
                elm.title = opts[ 'title' ];
            }
            return elm;
        }, text: function (str) {
            return document.createTextNode(str);
        }, clear: function (node) {
            while (node.firstChild) {
                node.removeChild(node.firstChild);
            }
        }, pos: function (elm) {
            var cur = OZ.$(elm);
            var html = cur.ownerDocument.documentElement;
            var parent = cur.parentNode;
            var x = y = 0;
            if (cur == html) {
                return [ x, y ];
            }
            while (1) {
                if (OZ.Style.get(cur, 'position') == 'fixed') {
                    x += cur.offsetLeft;
                    y += cur.offsetTop;
                    return [ x, y ];
                }
                if (OZ.opera && (parent == html || OZ.Style.get(cur, 'display') != 'block')) {
                } else {
                    x -= parent.scrollLeft;
                    y -= parent.scrollTop;
                }
                if (parent == cur.offsetParent || cur.parentNode == html) {
                    x += cur.offsetLeft;
                    y += cur.offsetTop;
                    cur = parent;
                }
                if (parent == html) {
                    return [ x, y ];
                }
                parent = parent.parentNode;
            }
        }, scroll: function () {
            var x = document.documentElement.scrollLeft || document.body.scrollLeft || 0;
            var y = document.documentElement.scrollTop || document.body.scrollTop || 0;
            return [ x, y ];
        }, win: function (avail) {
            return (avail ? [ window.innerWidth, window.innerHeight ] : [ document.documentElement.clientWidth, document.documentElement.clientHeight ]);
        }, hasClass: function (node, className) {
            var cn = OZ.$(node).className;
            var arr = (cn ? cn.split(' ') : []);
            return (arr.indexOf(className) != -1);
        }, addClass: function (node, className) {
            if (OZ.DOM.hasClass(node, className)) {
                return;
            }
            var cn = OZ.$(node).className;
            var arr = (cn ? cn.split(' ') : []);
            arr.push(className);
            OZ.$(node).className = arr.join(' ');
        }, removeClass: function (node, className) {
            if (!OZ.DOM.hasClass(node, className)) {
                return;
            }
            var cn = OZ.$(node).className;
            var arr = (cn ? cn.split(' ') : []);
            var arr = arr.filter(function ($) {
                return $ != className;
            });
            OZ.$(node).className = arr.join(' ');
        }, append: function () {
            if (arguments.length == 1) {
                var arr = arguments[ 0 ];
                var root = OZ.$(arr[ 0 ]);
                for (var i = 1; i < arr.length; i++) {
                    root.appendChild(OZ.$(arr[ i ]));
                }
            } else {
                for (var i = 0; i < arguments.length; i++) {
                    OZ.DOM.append(arguments[ i ]);
                }
            }
        }
    },
    Style: {
        get: function (elm, prop) {
            if (document.defaultView && document.defaultView.getComputedStyle) {
                try {
                    var cs = elm.ownerDocument.defaultView.getComputedStyle(elm, '');
                } catch (e) {
                    return false;
                }
                if (!cs) {
                    return false;
                }
                return cs[ prop ];
            } else {
                return elm.currentStyle[ prop ];
            }
        }, set: function (elm, obj) {
            for (var p in obj) {
                var val = obj[ p ];
                if (p == 'opacity' && OZ.ie) {
                    p = 'filter';
                    val = 'alpha(opacity=' + Math.round(100 * val) + ')';
                    elm.style.zoom = 1;
                } else {
                    if (p == 'float') {
                        p = (OZ.ie ? 'styleFloat' : 'cssFloat');
                    }
                }
                if (p in elm.style) {
                    elm.style[ p ] = val;
                }
            }
        }
    },
    Request: function (url, callback, options) {
        var o = { data: false, method: 'get', headers: {}, xml: false };
        for (var p in options) {
            o[ p ] = options[ p ];
        }
        o.method = o.method.toUpperCase();
        var xhr = false;
        if (window.XMLHttpRequest) {
            xhr = new XMLHttpRequest();
        } else {
            if (window.ActiveXObject) {
                xhr = new ActiveXObject('Microsoft.XMLHTTP');
            } else {
                return false;
            }
        }
        xhr.open(o.method, url, true);
        xhr.onreadystatechange = function () {
            if (xhr.readyState != 4) {
                return;
            }
            if (!callback) {
                return;
            }
            var data = (o.xml ? xhr.responseXML : xhr.responseText);
            var headers = {};
            var h = xhr.getAllResponseHeaders();
            if (h) {
                h = h.split(/[\r\n]/);
                for (var i = 0; i < h.length; i++) {
                    if (h[ i ]) {
                        var v = h[ i ].match(/^([^:]+): *(.*)$/);
                        headers[ v[ 1 ] ] = v[ 2 ];
                    }
                }
            }
            callback(data, xhr.status, headers);
        };
        if (o.method == 'POST') {
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        }
        for (var p in o.headers) {
            xhr.setRequestHeader(p, o.headers[ p ]);
        }
        xhr.send(o.data || null);
        return xhr;
    }
};
if (!Function.prototype.bind) {
    Function.prototype.bind = function (thisObj) {
        var fn = this;
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(thisObj, args.concat(Array.prototype.slice.call(arguments)));
        };
    };
}
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (item, from) {
        var len = this.length;
        var i = from || 0;
        if (i < 0) {
            i += len;
        }
        for (; i < len; i++) {
            if (i in this && this[ i ] === item) {
                return i;
            }
        }
        return -1;
    };
}
if (!Array.indexOf) {
    Array.indexOf = function (obj, item, from) {
        return Array.prototype.indexOf.call(obj, item, from);
    };
}
if (!Array.prototype.lastIndexOf) {
    Array.prototype.lastIndexOf = function (item, from) {
        var len = this.length;
        var i = from || len - 1;
        if (i < 0) {
            i += len;
        }
        for (; i > -1; i--) {
            if (i in this && this[ i ] === item) {
                return i;
            }
        }
        return -1;
    };
}
if (!Array.lastIndexOf) {
    Array.lastIndexOf = function (obj, item, from) {
        return Array.prototype.lastIndexOf.call(obj, item, from);
    };
}
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function (cb, _this) {
        var len = this.length;
        for (var i = 0; i < len; i++) {
            if (i in this) {
                cb.call(_this, this[ i ], i, this);
            }
        }
    };
}
if (!Array.forEach) {
    Array.forEach = function (obj, cb, _this) {
        Array.prototype.forEach.call(obj, cb, _this);
    };
}
if (!Array.prototype.every) {
    Array.prototype.every = function (cb, _this) {
        var len = this.length;
        for (var i = 0; i < len; i++) {
            if (i in this && !cb.call(_this, this[ i ], i, this)) {
                return false;
            }
        }
        return true;
    };
}
if (!Array.every) {
    Array.every = function (obj, cb, _this) {
        return Array.prototype.every.call(obj, cb, _this);
    };
}
if (!Array.prototype.some) {
    Array.prototype.some = function (cb, _this) {
        var len = this.length;
        for (var i = 0; i < len; i++) {
            if (i in this && cb.call(_this, this[ i ], i, this)) {
                return true;
            }
        }
        return false;
    };
}
if (!Array.some) {
    Array.some = function (obj, cb, _this) {
        return Array.prototype.some.call(obj, cb, _this);
    };
}
if (!Array.prototype.map) {
    Array.prototype.map = function (cb, _this) {
        var len = this.length;
        var res = new Array(len);
        for (var i = 0; i < len; i++) {
            if (i in this) {
                res[ i ] = cb.call(_this, this[ i ], i, this);
            }
        }
        return res;
    };
}
if (!Array.map) {
    Array.map = function (obj, cb, _this) {
        return Array.prototype.map.call(obj, cb, _this);
    };
}
if (!Array.prototype.filter) {
    Array.prototype.filter = function (cb, _this) {
        var len = this.length;
        var res = [];
        for (var i = 0; i < len; i++) {
            if (i in this) {
                var val = this[ i ];
                if (cb.call(_this, val, i, this)) {
                    res.push(val);
                }
            }
        }
        return res;
    };
}
if (!Array.filter) {
    Array.filter = function (obj, cb, _this) {
        return Array.prototype.filter.call(obj, cb, _this);
    };
}
var CONFIG = {
    AVAILABLE_DBS: [ 'mysql', 'sqlite', 'web2py', 'mssql', 'postgresql', 'oracle', 'sqlalchemy', 'vfp9', 'cubrid', 'web2py' ],
    DEFAULT_DB: 'mysql',
    AVAILABLE_LOCALES: [ 'ar', 'cs', 'de', 'el', 'en', 'eo', 'es', 'fr', 'hu', 'it', 'ja', 'ko', 'nl', 'pl', 'pt_BR', 'ro', 'ru', 'sv', 'zh' ],
    DEFAULT_LOCALE: 'en',
    AVAILABLE_BACKENDS: [ 'php-mysql', 'php-s3', 'php-blank', 'php-file', 'php-sqlite', 'php-mysql+file', 'php-postgresql', 'php-pdo', 'perl-file', 'php-cubrid', 'asp-file', 'web2py' ],
    DEFAULT_BACKEND: [ 'php-mysql' ],
    RELATION_THICKNESS: 1,
    RELATION_SPACING: 15,
    RELATION_COLORS: [ '#cecece', '#cecece', '#cecece', '#cecece', '#cecece', '#cecece', '#cecece' ],
    STATIC_PATH: '',
    XHR_PATH: '',
    DROPBOX_KEY: null
};

function _(str) {
    if (!(str in window.LOCALE)) {
        return str;
    }
    return window.LOCALE[ str ];
}

if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function (suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
}
if (!String.prototype.trim) {
    String.prototype.trim = function () {
        return this.match(/^\s*([\s\S]*?)\s*$/)[ 1 ];
    };
}
if (!String.trim) {
    String.trim = function (obj) {
        return String.prototype.trim.call(obj);
    };
}
if (!Object.create) {
    Object.create = function (o) {
        if (arguments.length > 1) {
            throw new Error('Object.create polyfill only accepts the first parameter');
        }
        var tmp = function () {
        };
        tmp.prototype = o;
        return new tmp();
    };
}
var DATATYPES = false;
var LOCALE = {};
var SQL = {
    _subscribers: {}, publish: function (message, publisher, data) {
        var subscribers = this._subscribers[ message ] || [];
        var obj = { target: publisher, data: data };
        subscribers.forEach(function (subscriber) {
            subscriber(obj);
        });
    }, subscribe: function (message, subscriber) {
        if (!(message in this._subscribers)) {
            this._subscribers[ message ] = [];
        }
        var index = this._subscribers[ message ].indexOf(subscriber);
        if (index == -1) {
            this._subscribers[ message ].push(subscriber);
        }
    }, unsubscribe: function (message, subscriber) {
        var index = this._subscribers[ message ].indexOf(subscriber);
        if (index > -1) {
            this._subscribers[ message ].splice(index, 1);
        }
    }, escape: function (str) {
        return str.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;');
    }
};
window.onbeforeunload = function (e) {
    return '';
};
SQL.Visual = function () {
    this._init();
    this._build();
};
SQL.Visual.prototype._init = function () {
    this.dom = { container: null, title: null };
    this.data = { title: '' };
};
SQL.Visual.prototype._build = function () {
};
SQL.Visual.prototype.toXML = function () {
};
SQL.Visual.prototype.fromXML = function (node) {
};
SQL.Visual.prototype.destroy = function () {
    var p = this.dom.container.parentNode;
    if (p && p.nodeType == 1) {
        p.removeChild(this.dom.container);
    }
};
SQL.Visual.prototype.setTitle = function (text) {
    if (!text) {
        return;
    }
    this.data.title = text;
    this.dom.title.innerHTML = text;
};
SQL.Visual.prototype.getTitle = function () {
    return this.data.title;
};
SQL.Visual.prototype.redraw = function () {
};
SQL.Row = function (owner, title, data) {
    this.owner = owner;
    this.relations = [];
    this.keys = [];
    this.selected = false;
    this.expanded = false;
    SQL.Visual.apply(this);
    this.data.type = 0;
    this.data.size = '';
    this.data.def = null;
    this.data.nll = true;
    this.data.ai = false;
    this.data.comment = '';
    if (data) {
        this.update(data);
    }
    this.setTitle(title);
};
SQL.Row.prototype = Object.create(SQL.Visual.prototype);
SQL.Row.prototype._build = function () {
    this.dom.container = OZ.DOM.elm('tbody');
    this.dom.content = OZ.DOM.elm('tr');
    this.dom.selected = OZ.DOM.elm('div', { className: 'selected  add-relation', innerHTML: ' ', title: '添加关联关系' });
    this.dom.title = OZ.DOM.elm('div', { className: 'title' });
    var td1 = OZ.DOM.elm('td');
    var td2 = OZ.DOM.elm('td', { className: 'typehint' });
    this.dom.typehint = td2;
    OZ.DOM.append([ this.dom.container, this.dom.content ], [ this.dom.content, td1, td2 ], [ td1, this.dom.selected, this.dom.title ]);
    this.enter = this.enter.bind(this);
    this.changeComment = this.changeComment.bind(this);
    OZ.Event.add(this.dom.container, 'click', this.click.bind(this));
    OZ.Event.add(this.dom.container, 'dblclick', this.dblclick.bind(this));
};
SQL.Row.prototype.select = function () {
    if (this.selected) {
        return;
    }
    this.selected = true;
    this.redraw();
};
SQL.Row.prototype.deselect = function () {
    if (!this.selected) {
        return;
    }
    this.selected = false;
    this.redraw();
    this.collapse();
};
SQL.Row.prototype.setTitle = function (t) {
    var old = this.getTitle();
    for (var i = 0; i < this.relations.length; i++) {
        var r = this.relations[ i ];
        if (r.row1 != this) {
            continue;
        }
        var tt = r.row2.getTitle().replace(new RegExp(old, 'g'), t);
        if (tt != r.row2.getTitle()) {
            r.row2.setTitle(tt);
        }
    }
    SQL.Visual.prototype.setTitle.apply(this, [ t ]);
};
SQL.Row.prototype.click = function (e) {
    if (e.which === 1) {
        SQL.publish('rowclick', this);
        this.owner.owner.rowManager.select(this);
    }
};
SQL.Row.prototype.dblclick = function (e) {
    return;
    OZ.Event.prevent(e);
    OZ.Event.stop(e);
    this.expand();
};
SQL.Row.prototype.update = function (data) {
    var des = SQL.Designer;
    if (data.nll && data.def && data.def.match(/^null$/i)) {
        data.def = null;
    }
    for (var p in data) {
        this.data[ p ] = data[ p ];
    }
    if (!this.data.nll && this.data.def === null) {
        this.data.def = '';
    }
    var elm = this.getDataType();
    for (var i = 0; i < this.relations.length; i++) {
        var r = this.relations[ i ];
        if (r.row1 == this) {
            r.row2.update({ type: des.getFKTypeFor(this.data.type), size: this.data.size });
        }
    }
    this.redraw();
};
SQL.Row.prototype.up = function () {
    var r = this.owner.rows;
    var idx = r.indexOf(this);
    if (!idx) {
        return;
    }
    r[ idx - 1 ].dom.container.parentNode.insertBefore(this.dom.container, r[ idx - 1 ].dom.container);
    r.splice(idx, 1);
    r.splice(idx - 1, 0, this);
    this.redraw();
};
SQL.Row.prototype.down = function () {
    var r = this.owner.rows;
    var idx = r.indexOf(this);
    if (idx + 1 == this.owner.rows.length) {
        return;
    }
    r[ idx ].dom.container.parentNode.insertBefore(this.dom.container, r[ idx + 1 ].dom.container.nextSibling);
    r.splice(idx, 1);
    r.splice(idx + 1, 0, this);
    this.redraw();
};
SQL.Row.prototype.buildEdit = function () {
    OZ.DOM.clear(this.dom.container);
    var elms = [];
    this.dom.name = OZ.DOM.elm('input');
    this.dom.name.type = 'text';
    elms.push([ 'name', this.dom.name ]);
    OZ.Event.add(this.dom.name, 'keypress', this.enter);
    this.dom.type = this.buildTypeSelect(this.data.type);
    elms.push([ 'type', this.dom.type ]);
    this.dom.size = OZ.DOM.elm('input');
    this.dom.size.type = 'text';
    elms.push([ 'size', this.dom.size ]);
    this.dom.def = OZ.DOM.elm('input');
    this.dom.def.type = 'text';
    elms.push([ 'def', this.dom.def ]);
    this.dom.ai = OZ.DOM.elm('input');
    this.dom.ai.type = 'checkbox';
    elms.push([ 'ai', this.dom.ai ]);
    this.dom.nll = OZ.DOM.elm('input');
    this.dom.nll.type = 'checkbox';
    elms.push([ 'null', this.dom.nll ]);
    this.dom.comment = OZ.DOM.elm('span', { className: 'comment' });
    this.dom.comment.innerHTML = '';
    this.dom.comment.appendChild(document.createTextNode(this.data.comment));
    this.dom.commentbtn = OZ.DOM.elm('input');
    this.dom.commentbtn.type = 'button';
    this.dom.commentbtn.value = _('comment');
    OZ.Event.add(this.dom.commentbtn, 'click', this.changeComment);
    for (var i = 0; i < elms.length; i++) {
        var row = elms[ i ];
        var tr = OZ.DOM.elm('tr');
        var td1 = OZ.DOM.elm('td');
        var td2 = OZ.DOM.elm('td');
        var l = OZ.DOM.text(_(row[ 0 ]) + ': ');
        OZ.DOM.append([ tr, td1, td2 ], [ td1, l ], [ td2, row[ 1 ] ]);
        this.dom.container.appendChild(tr);
    }
    var tr = OZ.DOM.elm('tr');
    var td1 = OZ.DOM.elm('td');
    var td2 = OZ.DOM.elm('td');
    OZ.DOM.append([ tr, td1, td2 ], [ td1, this.dom.comment ], [ td2, this.dom.commentbtn ]);
    this.dom.container.appendChild(tr);
};
SQL.Row.prototype.changeComment = function (e) {
    var c = prompt(_('commenttext'), this.data.comment);
    if (c === null) {
        return;
    }
    this.data.comment = c;
    this.dom.comment.innerHTML = '';
    this.dom.comment.appendChild(document.createTextNode(this.data.comment));
};
SQL.Row.prototype.expand = function () {
    if (this.expanded) {
        return;
    }
    this.expanded = true;
    this.buildEdit();
    this.load();
    this.redraw();
    this.dom.name.focus();
    this.dom.name.select();
};
SQL.Row.prototype.collapse = function () {
    if (!this.expanded) {
        return;
    }
    this.expanded = false;
    var data = {
        type: this.dom.type.selectedIndex,
        def: this.dom.def.value,
        size: this.dom.size.value,
        nll: this.dom.nll.checked,
        ai: this.dom.ai.checked
    };
    OZ.DOM.clear(this.dom.container);
    this.dom.container.appendChild(this.dom.content);
    this.update(data);
    this.setTitle(this.dom.name.value);
};
SQL.Row.prototype.load = function () {
    this.dom.name.value = this.getTitle();
    var def = this.data.def;
    if (def === null) {
        def = 'NULL';
    }
    this.dom.def.value = def;
    this.dom.size.value = this.data.size;
    this.dom.nll.checked = this.data.nll;
    this.dom.ai.checked = this.data.ai;
};
SQL.Row.prototype.redraw = function () {
    var color = this.getColor();
    this.dom.container.style.backgroundColor = color;
    OZ.DOM.removeClass(this.dom.title, 'primary');
    OZ.DOM.removeClass(this.dom.title, 'key');
    if (this.isPrimary()) {
        OZ.DOM.addClass(this.dom.title, 'primary');
    }
    if (this.isKey()) {
        OZ.DOM.addClass(this.dom.title, 'key');
    }
    this.dom.selected.style.display = (this.selected ? '' : '');
    this.dom.container.title = this.data.comment;
    var typehint = [];
    if (this.owner.owner.getOption('showtype')) {
        var elm = this.getDataType();
        typehint.push(elm.getAttribute('sql'));
    }
    if (this.owner.owner.getOption('showsize') && this.data.size) {
        typehint.push('(' + this.data.size + ')');
    }
    this.dom.typehint.innerHTML = typehint.join(' ');
    this.owner.redraw();
    this.owner.owner.rowManager.redraw();
};
SQL.Row.prototype.addRelation = function (r) {
    this.relations.push(r);
};
SQL.Row.prototype.removeRelation = function (r) {
    var idx = this.relations.indexOf(r);
    if (idx == -1) {
        return;
    }
    this.relations.splice(idx, 1);
};
SQL.Row.prototype.addKey = function (k) {
    this.keys.push(k);
    this.redraw();
};
SQL.Row.prototype.removeKey = function (k) {
    var idx = this.keys.indexOf(k);
    if (idx == -1) {
        return;
    }
    this.keys.splice(idx, 1);
    this.redraw();
};
SQL.Row.prototype.getDataType = function () {
    var type = this.data.type;
    var elm = DATATYPES.getElementsByTagName('type')[ type ];
    return elm;
};
SQL.Row.prototype.getColor = function () {
    var elm = this.getDataType();
    var g = this.getDataType().parentNode;
    return elm.getAttribute('color') || g.getAttribute('color') || '#fff';
};
SQL.Row.prototype.buildTypeSelect = function (id) {
    var s = OZ.DOM.elm('select');
    var gs = DATATYPES.getElementsByTagName('group');
    for (var i = 0; i < gs.length; i++) {
        var g = gs[ i ];
        var og = OZ.DOM.elm('optgroup');
        og.style.backgroundColor = g.getAttribute('color') || '#fff';
        og.label = g.getAttribute('label');
        s.appendChild(og);
        var ts = g.getElementsByTagName('type');
        for (var j = 0; j < ts.length; j++) {
            var t = ts[ j ];
            var o = OZ.DOM.elm('option');
            if (t.getAttribute('color')) {
                o.style.backgroundColor = t.getAttribute('color');
            }
            if (t.getAttribute('note')) {
                o.title = t.getAttribute('note');
            }
            o.innerHTML = t.getAttribute('label');
            og.appendChild(o);
        }
    }
    s.selectedIndex = id;
    return s;
};
SQL.Row.prototype.destroy = function () {
    SQL.Visual.prototype.destroy.apply(this);
    while (this.relations.length) {
        this.owner.owner.removeRelation(this.relations[ 0 ]);
    }
    for (var i = 0; i < this.keys.length; i++) {
        this.keys[ i ].removeRow(this);
    }
};
SQL.Row.prototype.toXML = function () {
    var xml = '';
    var t = this.getTitle().replace(/"/g, '&quot;');
    var nn = (this.data.nll ? '1' : '0');
    var ai = (this.data.ai ? '1' : '0');
    xml += '<row name="' + t + '" null="' + nn + '" autoincrement="' + ai + '">\n';
    var elm = this.getDataType();
    var t = elm.getAttribute('sql');
    if (this.data.size.length) {
        t += '(' + this.data.size + ')';
    }
    xml += '<datatype>' + t + '</datatype>\n';
    if (this.data.def || this.data.def === null) {
        var q = elm.getAttribute('quote');
        var d = this.data.def;
        if (d === null) {
            d = 'NULL';
        } else {
            if (d != 'CURRENT_TIMESTAMP') {
                d = q + d + q;
            }
        }
        xml += '<default>' + SQL.escape(d) + '</default>';
    }
    for (var i = 0; i < this.relations.length; i++) {
        var r = this.relations[ i ];
        if (r.row2 != this) {
            continue;
        }
        xml += '<relation table="' + r.row1.owner.getTitle() + '" row="' + r.row1.getTitle() + '" />\n';
    }
    if (this.data.comment) {
        xml += '<comment>' + SQL.escape(this.data.comment) + '</comment>\n';
    }
    xml += '</row>\n';
    return xml;
};
SQL.Row.prototype.fromXML = function (node) {
    var name = node.getAttribute('name');
    var obj = { type: 0, size: '' };
    obj.nll = (node.getAttribute('null') == '1');
    obj.ai = (node.getAttribute('autoincrement') == '1');
    var cs = node.getElementsByTagName('comment');
    if (cs.length && cs[ 0 ].firstChild) {
        obj.comment = cs[ 0 ].firstChild.nodeValue;
    }
    var d = node.getElementsByTagName('datatype');
    if (d.length && d[ 0 ].firstChild) {
        var s = d[ 0 ].firstChild.nodeValue;
        var r = s.match(/^([^\(]+)(\((.*)\))?.*$/);
        var type = r[ 1 ];
        if (r[ 3 ]) {
            obj.size = r[ 3 ];
        }
        var types = window.DATATYPES.getElementsByTagName('type');
        for (var i = 0; i < types.length; i++) {
            var sql = types[ i ].getAttribute('sql');
            var re = types[ i ].getAttribute('re');
            if (sql == type || (re && new RegExp(re).exec(type))) {
                obj.type = i;
            }
        }
    }
    var elm = DATATYPES.getElementsByTagName('type')[ obj.type ];
    var d = node.getElementsByTagName('default');
    if (d.length && d[ 0 ].firstChild) {
        var def = d[ 0 ].firstChild.nodeValue;
        obj.def = def;
        var q = elm.getAttribute('quote');
        if (q) {
            var re = new RegExp('^' + q + '(.*)' + q + '$');
            var r = def.match(re);
            if (r) {
                obj.def = r[ 1 ];
            }
        }
    }
    this.update(obj);
    this.setTitle(name);
};
SQL.Row.prototype.isPrimary = function () {
    for (var i = 0; i < this.keys.length; i++) {
        var k = this.keys[ i ];
        if (k.getType() == 'PRIMARY') {
            return true;
        }
    }
    return false;
};
SQL.Row.prototype.isUnique = function () {
    for (var i = 0; i < this.keys.length; i++) {
        var k = this.keys[ i ];
        var t = k.getType();
        if (t == 'PRIMARY' || t == 'UNIQUE') {
            return true;
        }
    }
    return false;
};
SQL.Row.prototype.isKey = function () {
    return this.keys.length > 0;
};
SQL.Row.prototype.enter = function (e) {
    if (e.keyCode == 13) {
        this.collapse();
    }
};
SQL.Table = function (owner, name, x, y, z) {
    this.owner = owner;
    this.rows = [];
    this.keys = [];
    this.zIndex = 0;
    this._ec = [];
    this.flag = false;
    this.selected = false;
    SQL.Visual.apply(this);
    this.data.comment = '';
    this.setTitle(name);
    this.x = x || 0;
    this.y = y || 0;
    this.setZ(z);
    this.snap();
};
SQL.Table.prototype = Object.create(SQL.Visual.prototype);
SQL.Table.prototype._build = function () {
    this.dom.container = OZ.DOM.elm('div', { className: 'table' });
    this.dom.content = OZ.DOM.elm('table', { className: 'schema-table' });
    var thead = OZ.DOM.elm('thead');
    var tr = OZ.DOM.elm('tr');
    this.dom.title = OZ.DOM.elm('td', { className: 'title', colSpan: 2 });
    OZ.DOM.append([ this.dom.container, this.dom.content ], [ this.dom.content, thead ], [ thead, tr ], [ tr, this.dom.title ]);
    this.dom.mini = OZ.DOM.elm('div', { className: 'mini' });
    this.owner.map.dom.container.appendChild(this.dom.mini);
    this._ec.push(OZ.Event.add(this.dom.container, 'click', this.click.bind(this)));
    this._ec.push(OZ.Event.add(this.dom.container, 'dblclick', this.dblclick.bind(this)));
    this._ec.push(OZ.Event.add(this.dom.container, 'mousedown', this.down.bind(this)));
    this._ec.push(OZ.Event.add(this.dom.container, 'touchstart', this.down.bind(this)));
    this._ec.push(OZ.Event.add(this.dom.container, 'touchmove', OZ.Event.prevent));
};
SQL.Table.prototype.setTitle = function (t) {
    var old = this.getTitle();
    for (var i = 0; i < this.rows.length; i++) {
        var row = this.rows[ i ];
        for (var j = 0; j < row.relations.length; j++) {
            var r = row.relations[ j ];
            if (r.row1 != row) {
                continue;
            }
            var tt = row.getTitle().replace(new RegExp(old, 'g'), t);
            if (tt != row.getTitle()) {
                row.setTitle(tt);
            }
        }
    }
    SQL.Visual.prototype.setTitle.apply(this, [ t ]);
};
SQL.Table.prototype.getRelations = function () {
    var arr = [];
    for (var i = 0; i < this.rows.length; i++) {
        var row = this.rows[ i ];
        for (var j = 0; j < row.relations.length; j++) {
            var r = row.relations[ j ];
            if (arr.indexOf(r) == -1) {
                arr.push(r);
            }
        }
    }
    return arr;
};
SQL.Table.prototype.showRelations = function () {
    var rs = this.getRelations();
    for (var i = 0; i < rs.length; i++) {
        rs[ i ].show();
    }
};
SQL.Table.prototype.hideRelations = function () {
    var rs = this.getRelations();
    for (var i = 0; i < rs.length; i++) {
        rs[ i ].hide();
    }
};
SQL.Table.prototype.click = function (e) {
    OZ.Event.stop(e);
    var t = OZ.Event.target(e);
    this.owner.tableManager.select(this);
    if (t != this.dom.title) {
        return;
    }
    SQL.publish('tableclick', this);
    this.owner.rowManager.select(false);
};
SQL.Table.prototype.dblclick = function (e) {
    var t = OZ.Event.target(e);
    if (t == this.dom.title) {
        this.owner.tableManager.edit();
    }
};
SQL.Table.prototype.select = function () {
    if (this.selected) {
        return;
    }
    this.selected = true;
    OZ.DOM.addClass(this.dom.container, 'selected');
    OZ.DOM.addClass(this.dom.mini, 'mini_selected');
    this.redraw();
};
SQL.Table.prototype.deselect = function () {
    if (!this.selected) {
        return;
    }
    this.selected = false;
    OZ.DOM.removeClass(this.dom.container, 'selected');
    OZ.DOM.removeClass(this.dom.mini, 'mini_selected');
    this.redraw();
};
SQL.Table.prototype.addRow = function (title, data) {
    var r = new SQL.Row(this, title, data);
    this.rows.push(r);
    this.dom.content.appendChild(r.dom.container);
    this.redraw();
    return r;
};
SQL.Table.prototype.removeRow = function (r) {
    var idx = this.rows.indexOf(r);
    if (idx == -1) {
        return;
    }
    r.destroy();
    this.rows.splice(idx, 1);
    this.redraw();
};
SQL.Table.prototype.addKey = function (name) {
    var k = new SQL.Key(this, name);
    this.keys.push(k);
    return k;
};
SQL.Table.prototype.removeKey = function (k) {
    var idx = this.keys.indexOf(k);
    if (idx == -1) {
        return;
    }
    k.destroy();
    this.keys.splice(idx, 1);
};
SQL.Table.prototype.redraw = function () {
    var x = this.x;
    var y = this.y;
    if (this.selected) {
        x--;
        y--;
    }
    this.dom.container.style.left = x + 'px';
    this.dom.container.style.top = y + 'px';
    var ratioX = this.owner.map.width / this.owner.width;
    var ratioY = this.owner.map.height / this.owner.height;
    var w = this.dom.container.offsetWidth * ratioX;
    var h = this.dom.container.offsetHeight * ratioY;
    var x = this.x * ratioX;
    var y = this.y * ratioY;
    this.dom.mini.style.width = Math.round(w) + 'px';
    this.dom.mini.style.height = Math.round(h) + 'px';
    this.dom.mini.style.left = Math.round(x) + 'px';
    this.dom.mini.style.top = Math.round(y) + 'px';
    this.width = this.dom.container.offsetWidth;
    this.height = this.dom.container.offsetHeight;
    var rs = this.getRelations();
    for (var i = 0; i < rs.length; i++) {
        rs[ i ].redraw();
    }
};
SQL.Table.prototype.moveBy = function (dx, dy) {
    this.x += dx;
    this.y += dy;
    this.snap();
    this.redraw();
};
SQL.Table.prototype.moveTo = function (x, y) {
    this.x = x;
    this.y = y;
    this.snap();
    this.redraw();
};
SQL.Table.prototype.snap = function () {
    var snap = parseInt(SQL.Designer.getOption('snap'));
    if (snap) {
        this.x = Math.round(this.x / snap) * snap;
        this.y = Math.round(this.y / snap) * snap;
    }
};
SQL.Table.prototype.down = function (e) {
    OZ.Event.stop(e);
    var t = OZ.Event.target(e);
    if (t != this.dom.title) {
        return;
    }
    if (e.type == 'touchstart') {
        var event = e.touches[ 0 ];
        var moveEvent = 'touchmove';
        var upEvent = 'touchend';
    } else {
        var event = e;
        var moveEvent = 'mousemove';
        var upEvent = 'mouseup';
    }
    if (e.shiftKey || !this.selected) {
        this.owner.tableManager.select(this, e.shiftKey);
    }
    var t = SQL.Table;
    t.active = this.owner.tableManager.selection;
    var n = t.active.length;
    t.x = new Array(n);
    t.y = new Array(n);
    for (var i = 0; i < n; i++) {
        t.x[ i ] = t.active[ i ].x - event.clientX;
        t.y[ i ] = t.active[ i ].y - event.clientY;
    }
    if (this.owner.getOption('hide')) {
        for (var i = 0; i < n; i++) {
            t.active[ i ].hideRelations();
        }
    }
    this.documentMove = OZ.Event.add(document, moveEvent, this.move.bind(this));
    this.documentUp = OZ.Event.add(document, upEvent, this.up.bind(this));
};
SQL.Table.prototype.toXML = function () {
    var t = this.getTitle().replace(/"/g, '&quot;');
    var xml = '';
    xml += '<table x="' + this.x + '" y="' + this.y + '" name="' + t + '">\n';
    for (var i = 0; i < this.rows.length; i++) {
        xml += this.rows[ i ].toXML();
    }
    for (var i = 0; i < this.keys.length; i++) {
        xml += this.keys[ i ].toXML();
    }
    var c = this.getComment();
    if (c) {
        xml += '<comment>' + SQL.escape(c) + '</comment>\n';
    }
    xml += '</table>\n';
    return xml;
};
SQL.Table.prototype.fromXML = function (node) {
    var name = node.getAttribute('name');
    this.setTitle(name);
    var x = parseInt(node.getAttribute('x')) || 0;
    var y = parseInt(node.getAttribute('y')) || 0;
    this.moveTo(x, y);
    var rows = node.getElementsByTagName('row');
    for (var i = 0; i < rows.length; i++) {
        var row = rows[ i ];
        var r = this.addRow('');
        r.fromXML(row);
    }
    var keys = node.getElementsByTagName('key');
    for (var i = 0; i < keys.length; i++) {
        var key = keys[ i ];
        var k = this.addKey();
        k.fromXML(key);
    }
    for (var i = 0; i < node.childNodes.length; i++) {
        var ch = node.childNodes[ i ];
        if (ch.tagName && ch.tagName.toLowerCase() == 'comment' && ch.firstChild) {
            this.setComment(ch.firstChild.nodeValue);
        }
    }
};
SQL.Table.prototype.getZ = function () {
    return this.zIndex;
};
SQL.Table.prototype.setZ = function (z) {
    this.zIndex = z;
    this.dom.container.style.zIndex = z;
};
SQL.Table.prototype.findNamedRow = function (n) {
    for (var i = 0; i < this.rows.length; i++) {
        if (this.rows[ i ].getTitle() == n) {
            return this.rows[ i ];
        }
    }
    return false;
};
SQL.Table.prototype.setComment = function (c) {
    this.data.comment = c;
    this.dom.title.title = this.data.comment;
};
SQL.Table.prototype.getComment = function () {
    return this.data.comment;
};
SQL.Table.prototype.move = function (e) {
    var t = SQL.Table;
    SQL.Designer.removeSelection();
    if (e.type == 'touchmove') {
        if (e.touches.length > 1) {
            return;
        }
        var event = e.touches[ 0 ];
    } else {
        var event = e;
    }
    for (var i = 0; i < t.active.length; i++) {
        var x = t.x[ i ] + event.clientX;
        var y = t.y[ i ] + event.clientY;
        x = Math.max(x, 0);
        y = Math.max(y, 0);
        t.active[ i ].moveTo(x, y);
    }
};
SQL.Table.prototype.up = function (e) {
    var t = SQL.Table;
    var d = SQL.Designer;
    if (d.getOption('hide')) {
        for (var i = 0; i < t.active.length; i++) {
            t.active[ i ].showRelations();
            t.active[ i ].redraw();
        }
    }
    t.active = false;
    OZ.Event.remove(this.documentMove);
    OZ.Event.remove(this.documentUp);
    this.owner.sync();
};
SQL.Table.prototype.destroy = function () {
    SQL.Visual.prototype.destroy.apply(this);
    this.dom.mini.parentNode.removeChild(this.dom.mini);
    while (this.rows.length) {
        this.removeRow(this.rows[ 0 ]);
    }
    this._ec.forEach(OZ.Event.remove, OZ.Event);
};
SQL.Relation = function (owner, row1, row2) {
    this.owner = owner;
    this.row1 = row1;
    this.row2 = row2;
    this.color = '#000';
    this.hidden = false;
    SQL.Visual.apply(this);
    var all = row1.relations.concat(row2.relations);
    if (all.length) {
        this.color = all[ 0 ].getColor();
    } else {
        if (CONFIG.RELATION_COLORS) {
            SQL.Relation._counter++;
            var colorIndex = SQL.Relation._counter - 1;
            this.color = CONFIG.RELATION_COLORS[ colorIndex % CONFIG.RELATION_COLORS.length ];
        }
    }
    this.row1.addRelation(this);
    this.row2.addRelation(this);
    this.dom = [];
    if (this.owner.vector) {
        var path = document.createElementNS(this.owner.svgNS, 'path');
        path.setAttribute('stroke', this.color);
        path.setAttribute('stroke-width', CONFIG.RELATION_THICKNESS);
        path.setAttribute('fill', 'none');
        this.owner.dom.svg.appendChild(path);
        this.dom.push(path);
    } else {
        for (var i = 0; i < 3; i++) {
            var div = OZ.DOM.elm('div', { position: 'absolute', className: 'relation', backgroundColor: this.color });
            this.dom.push(div);
            if (i & 1) {
                OZ.Style.set(div, { width: CONFIG.RELATION_THICKNESS + 'px' });
            } else {
                OZ.Style.set(div, { height: CONFIG.RELATION_THICKNESS + 'px' });
            }
            this.owner.dom.container.appendChild(div);
        }
    }
    this.redraw();
};
SQL.Relation._counter = 0;
SQL.Relation.prototype = Object.create(SQL.Visual.prototype);
SQL.Relation.prototype.getColor = function () {
    return this.color;
};
SQL.Relation.prototype.show = function () {
    this.hidden = false;
    for (var i = 0; i < this.dom.length; i++) {
        this.dom[ i ].style.visibility = '';
    }
};
SQL.Relation.prototype.hide = function () {
    this.hidden = true;
    for (var i = 0; i < this.dom.length; i++) {
        this.dom[ i ].style.visibility = 'hidden';
    }
};
SQL.Relation.prototype.redrawNormal = function (p1, p2, half) {
    if (this.owner.vector) {
        var str = 'M ' + p1[ 0 ] + ' ' + p1[ 1 ] + ' C ' + (p1[ 0 ] + half) + ' ' + p1[ 1 ] + ' ';
        str += (p2[ 0 ] - half) + ' ' + p2[ 1 ] + ' ' + p2[ 0 ] + ' ' + p2[ 1 ];
        this.dom[ 0 ].setAttribute('d', str);
    } else {
        this.dom[ 0 ].style.left = p1[ 0 ] + 'px';
        this.dom[ 0 ].style.top = p1[ 1 ] + 'px';
        this.dom[ 0 ].style.width = half + 'px';
        this.dom[ 1 ].style.left = (p1[ 0 ] + half) + 'px';
        this.dom[ 1 ].style.top = Math.min(p1[ 1 ], p2[ 1 ]) + 'px';
        this.dom[ 1 ].style.height = (Math.abs(p1[ 1 ] - p2[ 1 ]) + CONFIG.RELATION_THICKNESS) + 'px';
        this.dom[ 2 ].style.left = (p1[ 0 ] + half + 1) + 'px';
        this.dom[ 2 ].style.top = p2[ 1 ] + 'px';
        this.dom[ 2 ].style.width = half + 'px';
    }
};
SQL.Relation.prototype.redrawSide = function (p1, p2, x) {
    if (this.owner.vector) {
        var str = 'M ' + p1[ 0 ] + ' ' + p1[ 1 ] + ' C ' + x + ' ' + p1[ 1 ] + ' ';
        str += x + ' ' + p2[ 1 ] + ' ' + p2[ 0 ] + ' ' + p2[ 1 ];
        this.dom[ 0 ].setAttribute('d', str);
    } else {
        this.dom[ 0 ].style.left = Math.min(x, p1[ 0 ]) + 'px';
        this.dom[ 0 ].style.top = p1[ 1 ] + 'px';
        this.dom[ 0 ].style.width = Math.abs(p1[ 0 ] - x) + 'px';
        this.dom[ 1 ].style.left = x + 'px';
        this.dom[ 1 ].style.top = Math.min(p1[ 1 ], p2[ 1 ]) + 'px';
        this.dom[ 1 ].style.height = (Math.abs(p1[ 1 ] - p2[ 1 ]) + CONFIG.RELATION_THICKNESS) + 'px';
        this.dom[ 2 ].style.left = Math.min(x, p2[ 0 ]) + 'px';
        this.dom[ 2 ].style.top = p2[ 1 ] + 'px';
        this.dom[ 2 ].style.width = Math.abs(p2[ 0 ] - x) + 'px';
    }
};
SQL.Relation.prototype.redraw = function () {
    if (this.hidden) {
        return;
    }
    var t1 = this.row1.owner.dom.container;
    var t2 = this.row2.owner.dom.container;
    var l1 = t1.offsetLeft;
    var l2 = t2.offsetLeft;
    var r1 = l1 + t1.offsetWidth;
    var r2 = l2 + t2.offsetWidth;
    var t1 = t1.offsetTop + this.row1.dom.container.offsetTop + Math.round(this.row1.dom.container.offsetHeight / 2);
    var t2 = t2.offsetTop + this.row2.dom.container.offsetTop + Math.round(this.row2.dom.container.offsetHeight / 2);
    if (this.row1.owner.selected) {
        t1++;
        l1++;
        r1--;
    }
    if (this.row2.owner.selected) {
        t2++;
        l2++;
        r2--;
    }
    var p1 = [ 0, 0 ];
    var p2 = [ 0, 0 ];
    if (r1 < l2 || r2 < l1) {
        if (Math.abs(r1 - l2) < Math.abs(r2 - l1)) {
            p1 = [ r1, t1 ];
            p2 = [ l2, t2 ];
        } else {
            p1 = [ r2, t2 ];
            p2 = [ l1, t1 ];
        }
        var half = Math.floor((p2[ 0 ] - p1[ 0 ]) / 2);
        this.redrawNormal(p1, p2, half);
    } else {
        var x = 0;
        var l = 0;
        if (Math.abs(l1 - l2) < Math.abs(r1 - r2)) {
            p1 = [ l1, t1 ];
            p2 = [ l2, t2 ];
            x = Math.min(l1, l2) - CONFIG.RELATION_SPACING;
        } else {
            p1 = [ r1, t1 ];
            p2 = [ r2, t2 ];
            x = Math.max(r1, r2) + CONFIG.RELATION_SPACING;
        }
        this.redrawSide(p1, p2, x);
    }
};
SQL.Relation.prototype.destroy = function () {
    this.row1.removeRelation(this);
    this.row2.removeRelation(this);
    for (var i = 0; i < this.dom.length; i++) {
        this.dom[ i ].parentNode.removeChild(this.dom[ i ]);
    }
};
SQL.Key = function (owner, type, name) {
    this.owner = owner;
    this.rows = [];
    this.type = type || 'INDEX';
    this.name = name || '';
    SQL.Visual.apply(this);
};
SQL.Key.prototype = Object.create(SQL.Visual.prototype);
SQL.Key.prototype.setName = function (n) {
    this.name = n;
};
SQL.Key.prototype.getName = function () {
    return this.name;
};
SQL.Key.prototype.setType = function (t) {
    if (!t) {
        return;
    }
    this.type = t;
    for (var i = 0; i < this.rows.length; i++) {
        this.rows[ i ].redraw();
    }
};
SQL.Key.prototype.getType = function () {
    return this.type;
};
SQL.Key.prototype.addRow = function (r) {
    if (r.owner != this.owner) {
        return;
    }
    this.rows.push(r);
    r.addKey(this);
};
SQL.Key.prototype.removeRow = function (r) {
    var idx = this.rows.indexOf(r);
    if (idx == -1) {
        return;
    }
    r.removeKey(this);
    this.rows.splice(idx, 1);
};
SQL.Key.prototype.destroy = function () {
    for (var i = 0; i < this.rows.length; i++) {
        this.rows[ i ].removeKey(this);
    }
};
SQL.Key.prototype.getLabel = function () {
    return this.name || this.type;
};
SQL.Key.prototype.toXML = function () {
    var xml = '';
    xml += '<key type="' + this.getType() + '" name="' + this.getName() + '">\n';
    for (var i = 0; i < this.rows.length; i++) {
        var r = this.rows[ i ];
        xml += '<part>' + r.getTitle() + '</part>\n';
    }
    xml += '</key>\n';
    return xml;
};
SQL.Key.prototype.fromXML = function (node) {
    this.setType(node.getAttribute('type'));
    this.setName(node.getAttribute('name'));
    var parts = node.getElementsByTagName('part');
    for (var i = 0; i < parts.length; i++) {
        var name = parts[ i ].firstChild.nodeValue;
        var row = this.owner.findNamedRow(name);
        this.addRow(row);
    }
};
SQL.Rubberband = function (owner) {
    this.owner = owner;
    SQL.Visual.apply(this);
    this.dom.container = OZ.$('rubberband');
    OZ.Event.add('area', 'mousedown', this.down.bind(this));
};
SQL.Rubberband.prototype = Object.create(SQL.Visual.prototype);
SQL.Rubberband.prototype.down = function (e) {
    OZ.Event.prevent(e);
    var scroll = OZ.DOM.scroll();
    this.x = this.x0 = e.clientX + scroll[ 0 ];
    this.y = this.y0 = e.clientY + scroll[ 1 ];
    this.width = 0;
    this.height = 0;
    this.redraw();
    this.documentMove = OZ.Event.add(document, 'mousemove', this.move.bind(this));
    this.documentUp = OZ.Event.add(document, 'mouseup', this.up.bind(this));
};
SQL.Rubberband.prototype.move = function (e) {
    var scroll = OZ.DOM.scroll();
    var x = e.clientX + scroll[ 0 ];
    var y = e.clientY + scroll[ 1 ];
    this.width = Math.abs(x - this.x0);
    this.height = Math.abs(y - this.y0);
    if (x < this.x0) {
        this.x = x;
    } else {
        this.x = this.x0;
    }
    if (y < this.y0) {
        this.y = y;
    } else {
        this.y = this.y0;
    }
    this.redraw();
    this.dom.container.style.visibility = 'visible';
};
SQL.Rubberband.prototype.up = function (e) {
    OZ.Event.prevent(e);
    this.dom.container.style.visibility = 'hidden';
    OZ.Event.remove(this.documentMove);
    OZ.Event.remove(this.documentUp);
    this.owner.tableManager.selectRect(this.x, this.y, this.width, this.height);
};
SQL.Rubberband.prototype.redraw = function () {
    this.dom.container.style.left = this.x + 'px';
    this.dom.container.style.top = this.y + 'px';
    this.dom.container.style.width = this.width + 'px';
    this.dom.container.style.height = this.height + 'px';
};
SQL.Map = function (owner) {
    this.owner = owner;
    SQL.Visual.apply(this);
    this.dom.container = OZ.$('minimap');
    this.width = this.dom.container.offsetWidth - 2;
    this.height = this.dom.container.offsetHeight - 2;
    this.dom.port = OZ.DOM.elm('div', { className: 'port', zIndex: 1 });
    this.dom.container.appendChild(this.dom.port);
    this.sync = this.sync.bind(this);
    this.flag = false;
    this.sync();
    OZ.Event.add(window, 'resize', this.sync);
    OZ.Event.add(window, 'scroll', this.sync);
    OZ.Event.add(this.dom.container, 'mousedown', this.down.bind(this));
    OZ.Event.add(this.dom.container, 'touchstart', this.down.bind(this));
    OZ.Event.add(this.dom.container, 'touchmove', OZ.Event.prevent);
};
SQL.Map.prototype = Object.create(SQL.Visual.prototype);
SQL.Map.prototype.down = function (e) {
    this.flag = true;
    this.dom.container.style.cursor = 'move';
    var pos = OZ.DOM.pos(this.dom.container);
    this.x = Math.round(pos[ 0 ] + this.l + this.w / 2);
    this.y = Math.round(pos[ 1 ] + this.t + this.h / 2);
    this.move(e);
    if (e.type == 'touchstart') {
        var eventMove = 'touchmove';
        var eventUp = 'touchend';
    } else {
        var eventMove = 'mousemove';
        var eventUp = 'mouseup';
    }
    this.documentMove = OZ.Event.add(document, eventMove, this.move.bind(this));
    this.documentUp = OZ.Event.add(document, eventUp, this.up.bind(this));
};
SQL.Map.prototype.move = function (e) {
    if (!this.flag) {
        return;
    }
    OZ.Event.prevent(e);
    if (e.type.match(/touch/)) {
        if (e.touches.length > 1) {
            return;
        }
        var event = e.touches[ 0 ];
    } else {
        var event = e;
    }
    var dx = event.clientX - this.x;
    var dy = event.clientY - this.y;
    if (this.l + dx < 0) {
        dx = -this.l;
    }
    if (this.t + dy < 0) {
        dy = -this.t;
    }
    if (this.l + this.w + 4 + dx > this.width) {
        dx = this.width - 4 - this.l - this.w;
    }
    if (this.t + this.h + 4 + dy > this.height) {
        dy = this.height - 4 - this.t - this.h;
    }
    this.x += dx;
    this.y += dy;
    this.l += dx;
    this.t += dy;
    var coefX = this.width / this.owner.width;
    var coefY = this.height / this.owner.height;
    var left = this.l / coefX;
    var top = this.t / coefY;
    if (OZ.webkit) {
        document.body.scrollLeft = Math.round(left);
        document.body.scrollTop = Math.round(top);
    } else {
        document.documentElement.scrollLeft = Math.round(left);
        document.documentElement.scrollTop = Math.round(top);
    }
    this.redraw();
};
SQL.Map.prototype.up = function (e) {
    this.flag = false;
    this.dom.container.style.cursor = '';
    OZ.Event.remove(this.documentMove);
    OZ.Event.remove(this.documentUp);
};
SQL.Map.prototype.sync = function () {
    var dims = OZ.DOM.win();
    var scroll = OZ.DOM.scroll();
    var scaleX = this.width / this.owner.width;
    var scaleY = this.height / this.owner.height;
    var w = dims[ 0 ] * scaleX - 4 - 0;
    var h = dims[ 1 ] * scaleY - 4 - 0;
    var x = scroll[ 0 ] * scaleX;
    var y = scroll[ 1 ] * scaleY;
    this.w = Math.round(w);
    this.h = Math.round(h);
    this.l = Math.round(x);
    this.t = Math.round(y);
    this.redraw();
};
SQL.Map.prototype.redraw = function () {
    this.dom.port.style.width = this.w + 'px';
    this.dom.port.style.height = this.h + 'px';
    this.dom.port.style.left = this.l + 'px';
    this.dom.port.style.top = this.t + 'px';
};
SQL.Toggle = function (elm) {
    this._state = null;
    this._elm = elm;
    OZ.Event.add(elm, 'click', this._click.bind(this));
    var defaultState = true;
    if (document.location.href.match(/toolbar=hidden/)) {
        defaultState = false;
    }
    this._switch(defaultState);
};
SQL.Toggle.prototype._click = function (e) {
    this._switch(!this._state);
};
SQL.Toggle.prototype._switch = function (state) {
    this._state = state;
    if (this._state) {
        OZ.$('bar').style.height = '';
    } else {
        OZ.$('bar').style.overflow = 'hidden';
        OZ.$('bar').style.height = this._elm.offsetHeight + 'px';
    }
    this._elm.className = (this._state ? 'on' : 'off');
};
SQL.IO = function (owner) {
    this.owner = owner;
    this._name = '';
    this.lastUsedName = '';
    this.dom = { container: OZ.$('io') };
    var ids = [ 'saveload', 'clientlocalsave', 'clientsave', 'clientlocalload', 'clientlocallist', 'clientload', 'clientsql', 'dropboxsave', 'dropboxload', 'dropboxlist', 'quicksave', 'serversave', 'serverload', 'serverlist', 'serverimport' ];
    for (var i = 0; i < ids.length; i++) {
        var id = ids[ i ];
        var elm = OZ.$(id);
        this.dom[ id ] = elm;
        elm.value = _(id);
    }
    this.dom.quicksave.value += ' (F2)';
    var ids = [ 'client', 'server', 'output', 'backendlabel' ];
    for (var i = 0; i < ids.length; i++) {
        var id = ids[ i ];
        var elm = OZ.$(id);
        elm.innerHTML = _(id);
    }
    this.dom.ta = OZ.$('textarea');
    this.dom.backend = OZ.$('backend');
    this.dropBoxInit();
    this.dom.container.parentNode.removeChild(this.dom.container);
    this.dom.container.style.visibility = '';
    this.saveresponse = this.saveresponse.bind(this);
    this.loadresponse = this.loadresponse.bind(this);
    this.listresponse = this.listresponse.bind(this);
    this.importresponse = this.importresponse.bind(this);
    OZ.Event.add(this.dom.saveload, 'click', this.click.bind(this));
    OZ.Event.add(this.dom.clientlocalsave, 'click', this.clientlocalsave.bind(this));
    OZ.Event.add(this.dom.clientsave, 'click', this.clientsave.bind(this));
    OZ.Event.add(this.dom.clientlocalload, 'click', this.clientlocalload.bind(this));
    OZ.Event.add(this.dom.clientlocallist, 'click', this.clientlocallist.bind(this));
    OZ.Event.add(this.dom.clientload, 'click', this.clientload.bind(this));
    OZ.Event.add(this.dom.dropboxload, 'click', this.dropboxload.bind(this));
    OZ.Event.add(this.dom.dropboxsave, 'click', this.dropboxsave.bind(this));
    OZ.Event.add(this.dom.dropboxlist, 'click', this.dropboxlist.bind(this));
    OZ.Event.add(this.dom.clientsql, 'click', this.clientsql.bind(this));
    OZ.Event.add(this.dom.quicksave, 'click', this.quicksave.bind(this));
    OZ.Event.add(this.dom.serversave, 'click', this.serversave.bind(this));
    OZ.Event.add(this.dom.serverload, 'click', this.serverload.bind(this));
    OZ.Event.add(this.dom.serverlist, 'click', this.serverlist.bind(this));
    OZ.Event.add(this.dom.serverimport, 'click', this.serverimport.bind(this));
    OZ.Event.add(document, 'keydown', this.press.bind(this));
    this.build();
};
SQL.IO.prototype.build = function () {
    OZ.DOM.clear(this.dom.backend);
    var bs = CONFIG.AVAILABLE_BACKENDS;
    var be = CONFIG.DEFAULT_BACKEND;
    var r = window.location.search.substring(1).match(/backend=([^&]*)/);
    if (r) {
        req = r[ 1 ];
        if (bs.indexOf(req) != -1) {
            be = req;
        }
    }
    for (var i = 0; i < bs.length; i++) {
        var o = OZ.DOM.elm('option');
        o.value = bs[ i ];
        o.innerHTML = bs[ i ];
        this.dom.backend.appendChild(o);
        if (bs[ i ] == be) {
            this.dom.backend.selectedIndex = i;
        }
    }
};
SQL.IO.prototype.click = function () {
    this.build();
    this.dom.ta.value = '';
    this.dom.clientsql.value = _('clientsql') + ' (' + window.DATATYPES.getAttribute('db') + ')';
    this.owner.window.open(_('saveload'), this.dom.container);
};
SQL.IO.prototype.fromXMLText = function (xml) {
    try {
        if (window.DOMParser) {
            var parser = new DOMParser();
            var xmlDoc = parser.parseFromString(xml, 'text/xml');
        } else {
            if (window.ActiveXObject || 'ActiveXObject' in window) {
                var xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
                xmlDoc.loadXML(xml);
            } else {
                throw new Error('No XML parser available.');
            }
        }
    } catch (e) {
        alert(_('xmlerror') + ': ' + e.message);
        return;
    }
    this.fromXML(xmlDoc);
};
SQL.IO.prototype.fromXML = function (xmlDoc) {
    if (!xmlDoc || !xmlDoc.documentElement) {
        alert(_('xmlerror') + ': Null document');
        return false;
    }
    this.owner.fromXML(xmlDoc.documentElement);
    this.owner.window.close();
    return true;
};
SQL.IO.prototype.clientsave = function () {
    var xml = this.owner.toXML();
    this.dom.ta.value = xml;
};
SQL.IO.prototype.clientload = function () {
    var xml = this.dom.ta.value;
    if (!xml) {
        alert(_('empty'));
        return;
    }
    this.fromXMLText(xml);
};
SQL.IO.prototype.promptName = function (title, suffix) {
    var lastUsedName = this.owner.getOption('lastUsedName') || this.lastUsedName;
    var name = prompt(_(title), lastUsedName);
    if (!name) {
        return null;
    }
    if (suffix && name.endsWith(suffix)) {
        name = name.substr(0, name.length - 4);
    }
    this.owner.setOption('lastUsedName', name);
    this.lastUsedName = name;
    return name;
};
SQL.IO.prototype.clientlocalsave = function () {
    if (!window.localStorage) {
        alert('Sorry, your browser does not seem to support localStorage.');
        return;
    }
    var xml = this.owner.toXML();
    if (xml.length >= (5 * 1024 * 1024) / 2) {
        alert('Warning: your database structure is above 5 megabytes in size, this is above the localStorage single key limit allowed by some browsers, example Mozilla Firefox 10');
        return;
    }
    var key = this.promptName('serversaveprompt');
    if (!key) {
        return;
    }
    key = 'wwwsqldesigner_databases_' + (key || 'default');
    try {
        localStorage.setItem(key, xml);
        if (localStorage.getItem(key) != xml) {
            throw new Error('Content verification failed');
        }
    } catch (e) {
        alert('Error saving database structure to localStorage! (' + e.message + ')');
    }
};
SQL.IO.prototype.clientlocalload = function () {
    if (!window.localStorage) {
        alert('Sorry, your browser does not seem to support localStorage.');
        return;
    }
    var key = this.promptName('serverloadprompt');
    if (!key) {
        return;
    }
    key = 'wwwsqldesigner_databases_' + (key || 'default');
    try {
        var xml = localStorage.getItem(key);
        if (!xml) {
            throw new Error('No data available');
        }
    } catch (e) {
        alert('Error loading database structure from localStorage! (' + e.message + ')');
        return;
    }
    this.fromXMLText(xml);
};
SQL.IO.prototype.clientlocallist = function () {
    if (!window.localStorage) {
        alert('Sorry, your browser does not seem to support localStorage.');
        return;
    }
    var baseKeysName = 'wwwsqldesigner_databases_';
    var localLen = localStorage.length;
    var data = '';
    var schemasFound = false;
    var code = 200;
    try {
        for (var i = 0; i < localLen; ++i) {
            var key = localStorage.key(i);
            if ((new RegExp(baseKeysName)).test(key)) {
                var result = key.substring(baseKeysName.length);
                schemasFound = true;
                data += result + '\n';
            }
        }
        if (!schemasFound) {
            throw new Error('No data available');
        }
    } catch (e) {
        alert('Error loading database names from localStorage! (' + e.message + ')');
        return;
    }
    this.listresponse(data, code);
};
SQL.IO.prototype.dropBoxInit = function () {
    if (CONFIG.DROPBOX_KEY) {
        this.dropboxClient = new Dropbox.Client({ key: CONFIG.DROPBOX_KEY });
    } else {
        this.dropboxClient = null;
        var elems = document.querySelectorAll('[id^=dropbox]');
        [].slice.call(elems).forEach(function (elem) {
            elem.style.display = 'none';
        });
    }
};
SQL.IO.prototype.showDropboxError = function (error) {
    var prefix = _('Dropbox error') + ': ';
    var msg = error.status;
    switch (error.status) {
        case Dropbox.ApiError.INVALID_TOKEN:
            msg = _('Token expired - retry the operation, authenticating again with Dropbox');
            this.dropboxClient.reset();
            break;
        case Dropbox.ApiError.NOT_FOUND:
            msg = _('File not found');
            break;
        case Dropbox.ApiError.OVER_QUOTA:
            msg = _('Dropbox is full');
            break;
        case Dropbox.ApiError.RATE_LIMITED:
            break;
        case Dropbox.ApiError.NETWORK_ERROR:
            msg = _('Network error');
            break;
        case Dropbox.ApiError.INVALID_PARAM:
        case Dropbox.ApiError.OAUTH_ERROR:
        case Dropbox.ApiError.INVALID_METHOD:
        default:
    }
    alert(prefix + msg);
};
SQL.IO.prototype.showDropboxAuthenticate = function (connectedCallBack) {
    if (!this.dropboxClient) {
        return false;
    }
    var href = window.location.href;
    var prefix = href.substring(0, href.lastIndexOf('/')) + '/';
    this.dropboxClient.authDriver(new Dropbox.AuthDriver.Popup({ receiverUrl: prefix + 'dropbox-oauth-receiver.html' }));
    var sql_io = this;
    sql_io.dropboxClient.authenticate(function (error, client) {
        if (error) {
            sql_io.showDropboxError(error);
        } else {
            connectedCallBack();
        }
        return;
    });
    return true;
};
SQL.IO.prototype.dropboxsave = function () {
    var sql_io = this;
    sql_io.showDropboxAuthenticate(function () {
        var key = sql_io.promptName('serversaveprompt', '.xml');
        if (!key) {
            return;
        }
        var filename = (key || 'default') + '.xml';
        sql_io.listresponse('Saving...', 200);
        var xml = sql_io.owner.toXML();
        sql_io.dropboxClient.writeFile(filename, xml, function (error, stat) {
            if (error) {
                sql_io.listresponse('', 200);
                return sql_io.showDropboxError(error);
            }
            sql_io.listresponse(filename + ' ' + _('was saved to Dropbox'), 200);
        });
    });
};
SQL.IO.prototype.dropboxload = function () {
    var sql_io = this;
    sql_io.showDropboxAuthenticate(function () {
        var key = sql_io.promptName('serverloadprompt', '.xml');
        if (!key) {
            return;
        }
        var filename = (key || 'default') + '.xml';
        sql_io.listresponse('Loading...', 200);
        sql_io.dropboxClient.readFile(filename, function (error, data) {
            sql_io.listresponse('', 200);
            if (error) {
                return sql_io.showDropboxError(error);
            }
            sql_io.fromXMLText(data);
        });
    });
};
SQL.IO.prototype.dropboxlist = function () {
    var sql_io = this;
    sql_io.showDropboxAuthenticate(function () {
        sql_io.listresponse('Loading...', 200);
        sql_io.dropboxClient.readdir('/', function (error, entries) {
            if (error) {
                sql_io.listresponse('', 200);
                return sql_io.showDropboxError(error);
            }
            var data = entries.join('\n') + '\n';
            sql_io.listresponse(data, 200);
        });
    });
};
SQL.IO.prototype.clientsql = function () {
    var bp = this.owner.getOption('staticpath');
    var path = bp + 'db/' + window.DATATYPES.getAttribute('db') + '/output.xsl';
    this.owner.window.showThrobber();
    OZ.Request(path, this.finish.bind(this), { xml: true });
};
SQL.IO.prototype.finish = function (xslDoc) {
    this.owner.window.hideThrobber();
    var xml = this.owner.toXML();
    var sql = '';
    try {
        if (window.XSLTProcessor && window.DOMParser) {
            var parser = new DOMParser();
            var xmlDoc = parser.parseFromString(xml, 'text/xml');
            var xsl = new XSLTProcessor();
            xsl.importStylesheet(xslDoc);
            var result = xsl.transformToDocument(xmlDoc);
            sql = result.documentElement.textContent;
        } else {
            if (window.ActiveXObject || 'ActiveXObject' in window) {
                var xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
                xmlDoc.loadXML(xml);
                sql = xmlDoc.transformNode(xslDoc);
            } else {
                throw new Error('No XSLT processor available');
            }
        }
    } catch (e) {
        alert(_('xmlerror') + ': ' + e.message);
        return;
    }
    this.dom.ta.value = sql.trim();
};
SQL.IO.prototype.serversave = function (e, keyword) {
    var name = keyword || prompt(_('serversaveprompt'), this._name);
    if (!name) {
        return;
    }
    this._name = name;
    var xml = this.owner.toXML();
    var bp = this.owner.getOption('xhrpath');
    var url = bp + 'backend/' + this.dom.backend.value + '/?action=save&keyword=' + encodeURIComponent(name);
    var h = { 'Content-type': 'application/xml' };
    this.owner.window.showThrobber();
    this.owner.setTitle(name);
    OZ.Request(url, this.saveresponse, { xml: true, method: 'post', data: xml, headers: h });
};
SQL.IO.prototype.quicksave = function (e) {
    this.serversave(e, this._name);
};
SQL.IO.prototype.serverload = function (e, keyword) {
    var name = keyword || prompt(_('serverloadprompt'), this._name);
    if (!name) {
        return;
    }
    this._name = name;
    var bp = this.owner.getOption('xhrpath');
    var url = bp + 'backend/' + this.dom.backend.value + '/?action=load&keyword=' + encodeURIComponent(name);
    this.owner.window.showThrobber();
    this.name = name;
    OZ.Request(url, this.loadresponse, { xml: true });
};
SQL.IO.prototype.serverlist = function (e) {
    var bp = this.owner.getOption('xhrpath');
    var url = bp + 'backend/' + this.dom.backend.value + '/?action=list';
    this.owner.window.showThrobber();
    OZ.Request(url, this.listresponse);
};
SQL.IO.prototype.serverimport = function (e) {
    var name = prompt(_('serverimportprompt'), '');
    if (!name) {
        return;
    }
    var bp = this.owner.getOption('xhrpath');
    var url = bp + 'backend/' + this.dom.backend.value + '/?action=import&database=' + name;
    this.owner.window.showThrobber();
    OZ.Request(url, this.importresponse, { xml: true });
};
SQL.IO.prototype.check = function (code) {
    switch (code) {
        case 201:
        case 404:
        case 500:
        case 501:
        case 503:
            var lang = 'http' + code;
            this.dom.ta.value = _('httpresponse') + ': ' + _(lang);
            return false;
            break;
        default:
            return true;
    }
};
SQL.IO.prototype.saveresponse = function (data, code) {
    this.owner.window.hideThrobber();
    this.check(code);
};
SQL.IO.prototype.loadresponse = function (data, code) {
    this.owner.window.hideThrobber();
    if (!this.check(code)) {
        return;
    }
    this.fromXML(data);
    this.owner.setTitle(this.name);
};
SQL.IO.prototype.listresponse = function (data, code) {
    this.owner.window.hideThrobber();
    if (!this.check(code)) {
        return;
    }
    this.dom.ta.value = data;
};
SQL.IO.prototype.importresponse = function (data, code) {
    this.owner.window.hideThrobber();
    if (!this.check(code)) {
        return;
    }
    if (this.fromXML(data)) {
        this.owner.alignTables();
    }
};
SQL.IO.prototype.press = function (e) {
    switch (e.keyCode) {
        case 113:
            if (OZ.opera) {
                e.preventDefault();
            }
            this.quicksave(e);
            break;
    }
};
SQL.TableManager = function (owner) {
    this.owner = owner;
    this.dom = { container: OZ.$('table'), name: OZ.$('tablename'), comment: OZ.$('tablecomment') };
    this.selection = [];
    this.adding = false;
    var ids = [ 'addtable', 'removetable', 'aligntables', 'cleartables', 'addrow', 'edittable', 'tablekeys' ];
    for (var i = 0; i < ids.length; i++) {
        var id = ids[ i ];
        var elm = OZ.$(id);
        this.dom[ id ] = elm;
        elm.value = _(id);
    }
    var ids = [ 'tablenamelabel', 'tablecommentlabel' ];
    for (var i = 0; i < ids.length; i++) {
        var id = ids[ i ];
        var elm = OZ.$(id);
        elm.innerHTML = _(id);
    }
    this.select(false);
    this.save = this.save.bind(this);
    OZ.Event.add('area', 'click', this.click.bind(this));
    OZ.Event.add(this.dom.addtable, 'click', this.preAdd.bind(this));
    OZ.Event.add(this.dom.removetable, 'click', this.remove.bind(this));
    OZ.Event.add(this.dom.cleartables, 'click', this.clear.bind(this));
    OZ.Event.add(this.dom.addrow, 'click', this.addRow.bind(this));
    OZ.Event.add(this.dom.aligntables, 'click', this.owner.alignTables.bind(this.owner));
    OZ.Event.add(this.dom.edittable, 'click', this.edit.bind(this));
    OZ.Event.add(this.dom.tablekeys, 'click', this.keys.bind(this));
    OZ.Event.add(document, 'keydown', this.press.bind(this));
    this.dom.container.parentNode.removeChild(this.dom.container);
};
SQL.TableManager.prototype.addRow = function (e) {
    var newrow = this.selection[ 0 ].addRow(_('newrow'));
    this.owner.rowManager.select(newrow);
    newrow.expand();
};
SQL.TableManager.prototype.select = function (table, multi) {
    if (table) {
        if (multi) {
            var i = this.selection.indexOf(table);
            if (i < 0) {
                this.selection.push(table);
            } else {
                this.selection.splice(i, 1);
            }
        } else {
            if (this.selection[ 0 ] === table) {
                return;
            }
            this.selection = [ table ];
        }
    } else {
        this.selection = [];
    }
    this.processSelection();
};
SQL.TableManager.prototype.processSelection = function () {
    var tables = this.owner.tables;
    for (var i = 0; i < tables.length; i++) {
        tables[ i ].deselect();
    }
    if (this.selection.length == 1) {
        this.dom.addrow.disabled = false;
        this.dom.edittable.disabled = false;
        this.dom.tablekeys.disabled = false;
        this.dom.removetable.value = _('removetable');
    } else {
        this.dom.addrow.disabled = true;
        this.dom.edittable.disabled = true;
        this.dom.tablekeys.disabled = true;
    }
    if (this.selection.length) {
        this.dom.removetable.disabled = false;
        if (this.selection.length > 1) {
            this.dom.removetable.value = _('removetables');
        }
    } else {
        this.dom.removetable.disabled = true;
        this.dom.removetable.value = _('removetable');
    }
    for (var i = 0; i < this.selection.length; i++) {
        var t = this.selection[ i ];
        t.owner.raise(t);
        t.select();
    }
};
SQL.TableManager.prototype.selectRect = function (x, y, width, height) {
    this.selection = [];
    var tables = this.owner.tables;
    var x1 = x + width;
    var y1 = y + height;
    for (var i = 0; i < tables.length; i++) {
        var t = tables[ i ];
        var tx = t.x;
        var tx1 = t.x + t.width;
        var ty = t.y;
        var ty1 = t.y + t.height;
        if (((tx >= x && tx < x1) || (tx1 >= x && tx1 < x1) || (tx < x && tx1 > x1)) && ((ty >= y && ty < y1) || (ty1 >= y && ty1 < y1) || (ty < y && ty1 > y1))) {
            this.selection.push(t);
        }
    }
    this.processSelection();
};
SQL.TableManager.prototype.click = function (e) {
    var newtable = false;
    if (this.adding) {
        this.adding = false;
        OZ.DOM.removeClass('area', 'adding');
        this.dom.addtable.value = this.oldvalue;
        var scroll = OZ.DOM.scroll();
        var x = e.clientX + scroll[ 0 ];
        var y = e.clientY + scroll[ 1 ];
        newtable = this.owner.addTable(_('newtable'), x, y);
        var r = newtable.addRow('id', { ai: true });
        var k = newtable.addKey('PRIMARY', '');
        k.addRow(r);
    }
    this.select(newtable);
    this.owner.rowManager.select(false);
    if (this.selection.length == 1) {
        this.edit(e);
    }
};
SQL.TableManager.prototype.preAdd = function (e) {
    if (this.adding) {
        this.adding = false;
        OZ.DOM.removeClass('area', 'adding');
        this.dom.addtable.value = this.oldvalue;
    } else {
        this.adding = true;
        OZ.DOM.addClass('area', 'adding');
        this.oldvalue = this.dom.addtable.value;
        this.dom.addtable.value = '[' + _('addpending') + ']';
    }
};
SQL.TableManager.prototype.clear = function (e) {
    if (!this.owner.tables.length) {
        return;
    }
    var result = confirm(_('confirmall') + ' ?');
    if (!result) {
        return;
    }
    this.owner.clearTables();
};
SQL.TableManager.prototype.remove = function (e) {
    var titles = this.selection.slice(0);
    for (var i = 0; i < titles.length; i++) {
        titles[ i ] = '\'' + titles[ i ].getTitle() + '\'';
    }
    var result = confirm(_('confirmtable') + ' ' + titles.join(', ') + '?');
    if (!result) {
        return;
    }
    var sel = this.selection.slice(0);
    for (var i = 0; i < sel.length; i++) {
        this.owner.removeTable(sel[ i ]);
    }
};
SQL.TableManager.prototype.edit = function (e) {
    this.owner.window.open(_('edittable'), this.dom.container, this.save);
    var title = this.selection[ 0 ].getTitle();
    this.dom.name.value = title;
    try {
        this.dom.comment.value = this.selection[ 0 ].getComment();
    } catch (e) {
    }
    this.dom.name.focus();
    if (OZ.ie) {
        try {
            this.dom.name.select();
        } catch (e) {
        }
    } else {
        this.dom.name.setSelectionRange(0, title.length);
    }
};
SQL.TableManager.prototype.keys = function (e) {
    this.owner.keyManager.open(this.selection[ 0 ]);
};
SQL.TableManager.prototype.save = function () {
    this.selection[ 0 ].setTitle(this.dom.name.value);
    this.selection[ 0 ].setComment(this.dom.comment.value);
};
SQL.TableManager.prototype.press = function (e) {
    var target = OZ.Event.target(e).nodeName.toLowerCase();
    if (target == 'textarea' || target == 'input') {
        return;
    }
    if (this.owner.rowManager.selected) {
        return;
    }
    if (!this.selection.length) {
        return;
    }
    switch (e.keyCode) {
        case 46:
            this.remove();
            OZ.Event.prevent(e);
            break;
    }
};
SQL.RowManager = function (owner) {
    this.owner = owner;
    this.dom = {};
    this.selected = null;
    this.creating = false;
    this.connecting = false;
    var ids = [ 'editrow', 'removerow', 'uprow', 'downrow', 'foreigncreate', 'foreignconnect', 'foreigndisconnect' ];
    for (var i = 0; i < ids.length; i++) {
        var id = ids[ i ];
        var elm = OZ.$(id);
        this.dom[ id ] = elm;
        elm.value = _(id);
    }
    this.select(false);
    OZ.Event.add(this.dom.editrow, 'click', this.edit.bind(this));
    OZ.Event.add(this.dom.uprow, 'click', this.up.bind(this));
    OZ.Event.add(this.dom.downrow, 'click', this.down.bind(this));
    OZ.Event.add(this.dom.removerow, 'click', this.remove.bind(this));
    OZ.Event.add(this.dom.foreigncreate, 'click', this.foreigncreate.bind(this));
    OZ.Event.add(this.dom.foreignconnect, 'click', this.foreignconnect.bind(this));
    OZ.Event.add(this.dom.foreigndisconnect, 'click', this.foreigndisconnect.bind(this));
    OZ.Event.add(document, 'keydown', this.press.bind(this));
    SQL.subscribe('tableclick', this.tableClick.bind(this));
    SQL.subscribe('rowclick', this.rowClick.bind(this));
};
SQL.RowManager.prototype.select = function (row) {
    if (this.selected === row) {
        return;
    }
    if (this.selected) {
        this.selected.deselect();
    }
    this.selected = row;
    if (this.selected) {
        this.selected.select();
    }
    this.redraw();
};
SQL.RowManager.prototype.tableClick = function (e) {
    if (!this.creating) {
        return;
    }
    var r1 = this.selected;
    var t2 = e.target;
    var p = this.owner.getOption('pattern');
    p = p.replace(/%T/g, r1.owner.getTitle());
    p = p.replace(/%t/g, t2.getTitle());
    p = p.replace(/%R/g, r1.getTitle());
    var r2 = t2.addRow(p, r1.data);
    r2.update({ 'type': SQL.Designer.getFKTypeFor(r1.data.type) });
    r2.update({ 'ai': false });
    this.owner.addRelation(r1, r2);
};
SQL.RowManager.prototype.rowClick = function (e) {
    if (!this.connecting) {
        return;
    }
    var r1 = this.selected;
    var r2 = e.target;
    if (r1 == r2) {
        return;
    }
    this.owner.addRelation(r1, r2);
};
SQL.RowManager.prototype.foreigncreate = function (e) {
    this.endConnect();
    if (this.creating) {
        this.endCreate();
    } else {
        this.creating = true;
        this.dom.foreigncreate.value = '[' + _('foreignpending') + ']';
    }
};
SQL.RowManager.prototype.foreignconnect = function (e) {
    this.endCreate();
    if (this.connecting) {
        this.endConnect();
    } else {
        this.connecting = true;
        this.dom.foreignconnect.value = '[' + _('foreignconnectpending') + ']';
    }
};
SQL.RowManager.prototype.foreigndisconnect = function (e) {
    var rels = this.selected.relations;
    for (var i = rels.length - 1; i >= 0; i--) {
        var r = rels[ i ];
        if (r.row2 == this.selected) {
            this.owner.removeRelation(r);
        }
    }
    this.redraw();
};
SQL.RowManager.prototype.endCreate = function () {
    this.creating = false;
    this.dom.foreigncreate.value = _('foreigncreate');
};
SQL.RowManager.prototype.endConnect = function () {
    this.connecting = false;
    this.dom.foreignconnect.value = _('foreignconnect');
};
SQL.RowManager.prototype.up = function (e) {
    this.selected.up();
    this.redraw();
};
SQL.RowManager.prototype.down = function (e) {
    this.selected.down();
    this.redraw();
};
SQL.RowManager.prototype.remove = function (e) {
    var result = confirm(_('confirmrow') + ' \'' + this.selected.getTitle() + '\' ?');
    if (!result) {
        return;
    }
    var t = this.selected.owner;
    this.selected.owner.removeRow(this.selected);
    var next = false;
    if (t.rows) {
        next = t.rows[ t.rows.length - 1 ];
    }
    this.select(next);
};
SQL.RowManager.prototype.redraw = function () {
    this.endCreate();
    this.endConnect();
    if (this.selected) {
        var table = this.selected.owner;
        var rows = table.rows;
        this.dom.uprow.disabled = (rows[ 0 ] == this.selected);
        this.dom.downrow.disabled = (rows[ rows.length - 1 ] == this.selected);
        this.dom.removerow.disabled = false;
        this.dom.editrow.disabled = false;
        this.dom.foreigncreate.disabled = !(this.selected.isUnique());
        this.dom.foreignconnect.disabled = !(this.selected.isUnique());
        this.dom.foreigndisconnect.disabled = true;
        var rels = this.selected.relations;
        for (var i = 0; i < rels.length; i++) {
            var r = rels[ i ];
            if (r.row2 == this.selected) {
                this.dom.foreigndisconnect.disabled = false;
            }
        }
    } else {
        this.dom.uprow.disabled = true;
        this.dom.downrow.disabled = true;
        this.dom.removerow.disabled = true;
        this.dom.editrow.disabled = true;
        this.dom.foreigncreate.disabled = true;
        this.dom.foreignconnect.disabled = true;
        this.dom.foreigndisconnect.disabled = true;
    }
};
SQL.RowManager.prototype.press = function (e) {
    if (!this.selected) {
        return;
    }
    var target = OZ.Event.target(e).nodeName.toLowerCase();
    if (target == 'textarea' || target == 'input') {
        return;
    }
    switch (e.keyCode) {
        case 38:
            this.up();
            OZ.Event.prevent(e);
            break;
        case 40:
            this.down();
            OZ.Event.prevent(e);
            break;
        case 46:
            this.remove();
            OZ.Event.prevent(e);
            break;
        case 13:
        case 27:
            this.selected.collapse();
            break;
    }
};
SQL.RowManager.prototype.edit = function (e) {
    this.selected.expand();
};
SQL.KeyManager = function (owner) {
    this.owner = owner;
    this.dom = { container: OZ.$('keys') };
    this.build();
};
SQL.KeyManager.prototype.build = function () {
    this.dom.list = OZ.$('keyslist');
    this.dom.type = OZ.$('keytype');
    this.dom.name = OZ.$('keyname');
    this.dom.left = OZ.$('keyleft');
    this.dom.right = OZ.$('keyright');
    this.dom.fields = OZ.$('keyfields');
    this.dom.avail = OZ.$('keyavail');
    this.dom.listlabel = OZ.$('keyslistlabel');
    var ids = [ 'keyadd', 'keyremove' ];
    for (var i = 0; i < ids.length; i++) {
        var id = ids[ i ];
        var elm = OZ.$(id);
        this.dom[ id ] = elm;
        elm.value = _(id);
    }
    var ids = [ 'keyedit', 'keytypelabel', 'keynamelabel', 'keyfieldslabel', 'keyavaillabel' ];
    for (var i = 0; i < ids.length; i++) {
        var id = ids[ i ];
        var elm = OZ.$(id);
        elm.innerHTML = _(id);
    }
    var types = [ 'PRIMARY', 'INDEX', 'UNIQUE', 'FULLTEXT' ];
    OZ.DOM.clear(this.dom.type);
    for (var i = 0; i < types.length; i++) {
        var o = OZ.DOM.elm('option');
        o.innerHTML = types[ i ];
        o.value = types[ i ];
        this.dom.type.appendChild(o);
    }
    this.purge = this.purge.bind(this);
    OZ.Event.add(this.dom.list, 'change', this.listchange.bind(this));
    OZ.Event.add(this.dom.type, 'change', this.typechange.bind(this));
    OZ.Event.add(this.dom.name, 'keyup', this.namechange.bind(this));
    OZ.Event.add(this.dom.keyadd, 'click', this.add.bind(this));
    OZ.Event.add(this.dom.keyremove, 'click', this.remove.bind(this));
    OZ.Event.add(this.dom.left, 'click', this.left.bind(this));
    OZ.Event.add(this.dom.right, 'click', this.right.bind(this));
    this.dom.container.parentNode.removeChild(this.dom.container);
};
SQL.KeyManager.prototype.listchange = function (e) {
    this.switchTo(this.dom.list.selectedIndex);
};
SQL.KeyManager.prototype.typechange = function (e) {
    this.key.setType(this.dom.type.value);
    this.redrawListItem();
};
SQL.KeyManager.prototype.namechange = function (e) {
    this.key.setName(this.dom.name.value);
    this.redrawListItem();
};
SQL.KeyManager.prototype.add = function (e) {
    var type = (this.table.keys.length ? 'INDEX' : 'PRIMARY');
    this.table.addKey(type);
    this.sync(this.table);
    this.switchTo(this.table.keys.length - 1);
};
SQL.KeyManager.prototype.remove = function (e) {
    var index = this.dom.list.selectedIndex;
    if (index == -1) {
        return;
    }
    var r = this.table.keys[ index ];
    this.table.removeKey(r);
    this.sync(this.table);
};
SQL.KeyManager.prototype.purge = function () {
    for (var i = this.table.keys.length - 1; i >= 0; i--) {
        var k = this.table.keys[ i ];
        if (!k.rows.length) {
            this.table.removeKey(k);
        }
    }
};
SQL.KeyManager.prototype.sync = function (table) {
    this.table = table;
    this.dom.listlabel.innerHTML = _('keyslistlabel').replace(/%s/, table.getTitle());
    OZ.DOM.clear(this.dom.list);
    for (var i = 0; i < table.keys.length; i++) {
        var k = table.keys[ i ];
        var o = OZ.DOM.elm('option');
        this.dom.list.appendChild(o);
        var str = (i + 1) + ': ' + k.getLabel();
        o.innerHTML = str;
    }
    if (table.keys.length) {
        this.switchTo(0);
    } else {
        this.disable();
    }
};
SQL.KeyManager.prototype.redrawListItem = function () {
    var index = this.table.keys.indexOf(this.key);
    this.option.innerHTML = (index + 1) + ': ' + this.key.getLabel();
};
SQL.KeyManager.prototype.switchTo = function (index) {
    this.enable();
    var k = this.table.keys[ index ];
    this.key = k;
    this.option = this.dom.list.getElementsByTagName('option')[ index ];
    this.dom.list.selectedIndex = index;
    this.dom.name.value = k.getName();
    var opts = this.dom.type.getElementsByTagName('option');
    for (var i = 0; i < opts.length; i++) {
        if (opts[ i ].value == k.getType()) {
            this.dom.type.selectedIndex = i;
        }
    }
    OZ.DOM.clear(this.dom.fields);
    for (var i = 0; i < k.rows.length; i++) {
        var o = OZ.DOM.elm('option');
        o.innerHTML = k.rows[ i ].getTitle();
        o.value = o.innerHTML;
        this.dom.fields.appendChild(o);
    }
    OZ.DOM.clear(this.dom.avail);
    for (var i = 0; i < this.table.rows.length; i++) {
        var r = this.table.rows[ i ];
        if (k.rows.indexOf(r) != -1) {
            continue;
        }
        var o = OZ.DOM.elm('option');
        o.innerHTML = r.getTitle();
        o.value = o.innerHTML;
        this.dom.avail.appendChild(o);
    }
};
SQL.KeyManager.prototype.disable = function () {
    OZ.DOM.clear(this.dom.fields);
    OZ.DOM.clear(this.dom.avail);
    this.dom.keyremove.disabled = true;
    this.dom.left.disabled = true;
    this.dom.right.disabled = true;
    this.dom.list.disabled = true;
    this.dom.name.disabled = true;
    this.dom.type.disabled = true;
    this.dom.fields.disabled = true;
    this.dom.avail.disabled = true;
};
SQL.KeyManager.prototype.enable = function () {
    this.dom.keyremove.disabled = false;
    this.dom.left.disabled = false;
    this.dom.right.disabled = false;
    this.dom.list.disabled = false;
    this.dom.name.disabled = false;
    this.dom.type.disabled = false;
    this.dom.fields.disabled = false;
    this.dom.avail.disabled = false;
};
SQL.KeyManager.prototype.left = function (e) {
    var opts = this.dom.avail.getElementsByTagName('option');
    for (var i = 0; i < opts.length; i++) {
        var o = opts[ i ];
        if (o.selected) {
            var row = this.table.findNamedRow(o.value);
            this.key.addRow(row);
        }
    }
    this.switchTo(this.dom.list.selectedIndex);
};
SQL.KeyManager.prototype.right = function (e) {
    var opts = this.dom.fields.getElementsByTagName('option');
    for (var i = 0; i < opts.length; i++) {
        var o = opts[ i ];
        if (o.selected) {
            var row = this.table.findNamedRow(o.value);
            this.key.removeRow(row);
        }
    }
    this.switchTo(this.dom.list.selectedIndex);
};
SQL.KeyManager.prototype.open = function (table) {
    this.sync(table);
    this.owner.window.open(_('tablekeys'), this.dom.container, this.purge);
};
SQL.Window = function (owner) {
    this.owner = owner;
    this.dom = {
        container: OZ.$('window'),
        background: OZ.$('background'),
        ok: OZ.$('windowok'),
        cancel: OZ.$('windowcancel'),
        title: OZ.$('windowtitle'),
        content: OZ.$('windowcontent'),
        throbber: OZ.$('throbber')
    };
    this.dom.ok.value = _('windowok');
    this.dom.cancel.value = _('windowcancel');
    this.dom.throbber.alt = this.dom.throbber.title = _('throbber');
    OZ.Event.add(this.dom.ok, 'click', this.ok.bind(this));
    OZ.Event.add(this.dom.cancel, 'click', this.close.bind(this));
    OZ.Event.add(document, 'keydown', this.key.bind(this));
    this.sync = this.sync.bind(this);
    OZ.Event.add(window, 'scroll', this.sync);
    OZ.Event.add(window, 'resize', this.sync);
    this.state = 0;
    this.hideThrobber();
    this.sync();
};
SQL.Window.prototype.showThrobber = function () {
    this.dom.throbber.style.visibility = '';
};
SQL.Window.prototype.hideThrobber = function () {
    this.dom.throbber.style.visibility = 'hidden';
};
SQL.Window.prototype.open = function (title, content, callback) {
    this.state = 1;
    this.callback = callback;
    while (this.dom.title.childNodes.length > 1) {
        this.dom.title.removeChild(this.dom.title.childNodes[ 1 ]);
    }
    var txt = OZ.DOM.text(title);
    this.dom.title.appendChild(txt);
    this.dom.background.style.visibility = 'visible';
    OZ.DOM.clear(this.dom.content);
    this.dom.content.appendChild(content);
    var win = OZ.DOM.win();
    var scroll = OZ.DOM.scroll();
    this.dom.container.style.left = Math.round(scroll[ 0 ] + (win[ 0 ] - this.dom.container.offsetWidth) / 2) + 'px';
    this.dom.container.style.top = Math.round(scroll[ 1 ] + (win[ 1 ] - this.dom.container.offsetHeight) / 2) + 'px';
    this.dom.cancel.style.visibility = (this.callback ? '' : 'hidden');
    this.dom.container.style.visibility = 'visible';
    var formElements = [ 'input', 'select', 'textarea' ];
    var all = this.dom.container.getElementsByTagName('*');
    for (var i = 0; i < all.length; i++) {
        if (formElements.indexOf(all[ i ].tagName.toLowerCase()) != -1) {
            all[ i ].focus();
            break;
        }
    }
};
SQL.Window.prototype.key = function (e) {
    if (!this.state) {
        return;
    }
    if (e.keyCode == 13) {
        this.ok(e);
    }
    if (e.keyCode == 27) {
        this.close();
    }
};
SQL.Window.prototype.ok = function (e) {
    if (this.callback) {
        this.callback();
    }
    this.close();
};
SQL.Window.prototype.close = function () {
    if (!this.state) {
        return;
    }
    this.state = 0;
    this.dom.background.style.visibility = 'hidden';
    this.dom.container.style.visibility = 'hidden';
};
SQL.Window.prototype.sync = function () {
    var dims = OZ.DOM.win();
    var scroll = OZ.DOM.scroll();
    this.dom.background.style.width = dims[ 0 ] + 'px';
    this.dom.background.style.height = dims[ 1 ] + 'px';
    this.dom.background.style.left = scroll[ 0 ] + 'px';
    this.dom.background.style.top = scroll[ 1 ] + 'px';
};
SQL.Options = function (owner) {
    this.owner = owner;
    this.dom = { container: OZ.$('opts'), btn: OZ.$('options') };
    this.dom.btn.value = _('options');
    this.save = this.save.bind(this);
    this.build();
};
SQL.Options.prototype.build = function () {
    this.dom.optionlocale = OZ.$('optionlocale');
    this.dom.optiondb = OZ.$('optiondb');
    this.dom.optionsnap = OZ.$('optionsnap');
    this.dom.optionpattern = OZ.$('optionpattern');
    this.dom.optionhide = OZ.$('optionhide');
    this.dom.optionvector = OZ.$('optionvector');
    this.dom.optionshowsize = OZ.$('optionshowsize');
    this.dom.optionshowtype = OZ.$('optionshowtype');
    var ids = [ 'language', 'db', 'snap', 'pattern', 'hide', 'vector', 'showsize', 'showtype', 'optionsnapnotice', 'optionpatternnotice', 'optionsnotice' ];
    for (var i = 0; i < ids.length; i++) {
        var id = ids[ i ];
        var elm = OZ.$(id);
        elm.innerHTML = _(id);
    }
    var ls = CONFIG.AVAILABLE_LOCALES;
    OZ.DOM.clear(this.dom.optionlocale);
    for (var i = 0; i < ls.length; i++) {
        var o = OZ.DOM.elm('option');
        o.value = ls[ i ];
        o.innerHTML = ls[ i ];
        this.dom.optionlocale.appendChild(o);
        if (this.owner.getOption('locale') == ls[ i ]) {
            this.dom.optionlocale.selectedIndex = i;
        }
    }
    var dbs = CONFIG.AVAILABLE_DBS;
    OZ.DOM.clear(this.dom.optiondb);
    for (var i = 0; i < dbs.length; i++) {
        var o = OZ.DOM.elm('option');
        o.value = dbs[ i ];
        o.innerHTML = dbs[ i ];
        this.dom.optiondb.appendChild(o);
        if (this.owner.getOption('db') == dbs[ i ]) {
            this.dom.optiondb.selectedIndex = i;
        }
    }
    OZ.Event.add(this.dom.btn, 'click', this.click.bind(this));
    this.dom.container.parentNode.removeChild(this.dom.container);
};
SQL.Options.prototype.save = function () {
    this.owner.setOption('locale', this.dom.optionlocale.value);
    this.owner.setOption('db', this.dom.optiondb.value);
    this.owner.setOption('snap', this.dom.optionsnap.value);
    this.owner.setOption('pattern', this.dom.optionpattern.value);
    this.owner.setOption('hide', this.dom.optionhide.checked ? '1' : '');
    this.owner.setOption('vector', this.dom.optionvector.checked ? '1' : '');
    this.owner.setOption('showsize', this.dom.optionshowsize.checked ? '1' : '');
    this.owner.setOption('showtype', this.dom.optionshowtype.checked ? '1' : '');
};
SQL.Options.prototype.click = function () {
    this.owner.window.open(_('options'), this.dom.container, this.save);
    this.dom.optionsnap.value = this.owner.getOption('snap');
    this.dom.optionpattern.value = this.owner.getOption('pattern');
    this.dom.optionhide.checked = this.owner.getOption('hide');
    this.dom.optionvector.checked = this.owner.getOption('vector');
    this.dom.optionshowsize.checked = this.owner.getOption('showsize');
    this.dom.optionshowtype.checked = this.owner.getOption('showtype');
};
var CreatSQLDesigner = function () {
    SQL.Designer = function () {
        SQL.Designer = this;
        this.tables = [];
        this.relations = [];
        this.title = document.title;
        SQL.Visual.apply(this);
        new SQL.Toggle(OZ.$('toggle'));
        this.dom.container = OZ.$('area');
        this.minSize = [ this.dom.container.offsetWidth, this.dom.container.offsetHeight ];
        this.width = this.minSize[ 0 ];
        this.height = this.minSize[ 1 ];
        this.typeIndex = false;
        this.fkTypeFor = false;
        this.vector = this.getOption('vector') && document.createElementNS;
        if (this.vector) {
            this.svgNS = 'http://www.w3.org/2000/svg';
            this.dom.svg = document.createElementNS(this.svgNS, 'svg');
            this.dom.container.appendChild(this.dom.svg);
        }
        this.init2();
    };
    SQL.Designer.prototype = Object.create(SQL.Visual.prototype);
    SQL.Designer.prototype.sync = function () {
        var w = this.minSize[ 0 ];
        var h = this.minSize[ 0 ];
        for (var i = 0; i < this.tables.length; i++) {
            var t = this.tables[ i ];
            w = Math.max(w, t.x + t.width);
            h = Math.max(h, t.y + t.height);
        }
        this.width = w;
        this.height = h;
        this.map.sync();
        if (this.vector) {
            this.dom.svg.setAttribute('width', window.innerWidth - 284);
            this.dom.svg.setAttribute('height', 1000);
        }
    };
    SQL.Designer.prototype.requestLanguage = function () {
        var lang = this.getOption('locale');
        var bp = this.getOption('staticpath');
        var url = 'dataworks/assets/plugins/sqldesigner/' + 'locale/' + lang + '.xml';
        OZ.Request(url, this.languageResponse.bind(this), { method: 'get', xml: true });
    };
    SQL.Designer.prototype.languageResponse = function (xmlDoc) {
        if (xmlDoc) {
            var strings = xmlDoc.getElementsByTagName('string');
            for (var i = 0; i < strings.length; i++) {
                var n = strings[ i ].getAttribute('name');
                var v = strings[ i ].firstChild.nodeValue;
                window.LOCALE[ n ] = v;
            }
        }
        this.flag--;
        if (!this.flag) {
            this.init2();
        }
    };
    SQL.Designer.prototype.requestDB = function () {
        var db = this.getOption('db');
        var bp = this.getOption('staticpath');
        var url = 'dataworks/assets/plugins/sqldesigner/' + 'db/' + db + '/datatypes.xml';
        OZ.Request(url, this.dbResponse.bind(this), { method: 'get', xml: true });
    };
    SQL.Designer.prototype.dbResponse = function (xmlDoc) {
        if (xmlDoc) {
            window.DATATYPES = xmlDoc.documentElement;
        }
        this.flag--;
        if (!this.flag) {
            this.init2();
        }
    };
    SQL.Designer.prototype.init2 = function () {
        this.map = new SQL.Map(this);
        this.rubberband = new SQL.Rubberband(this);
        this.tableManager = new SQL.TableManager(this);
        this.rowManager = new SQL.RowManager(this);
        this.keyManager = new SQL.KeyManager(this);
        this.io = new SQL.IO(this);
        this.options = new SQL.Options(this);
        this.window = new SQL.Window(this);
        this.sync();
        OZ.$('docs').value = _('docs');
        var url = window.location.href;
        var r = url.match(/keyword=([^&]+)/);
        if (r) {
            var keyword = r[ 1 ];
            this.io.serverload(false, keyword);
        }
    };
    SQL.Designer.prototype.getMaxZ = function () {
        var max = 0;
        for (var i = 0; i < this.tables.length; i++) {
            var z = this.tables[ i ].getZ();
            if (z > max) {
                max = z;
            }
        }
        ;OZ.$('controls').style.zIndex = max + 5;
        return max;
    };
    SQL.Designer.prototype.addTable = function (name, x, y) {
        var max = this.getMaxZ();
        var t = new SQL.Table(this, name, x, y, max + 1);
        this.tables.push(t);
        this.dom.container.appendChild(t.dom.container);
        return t;
    };
    SQL.Designer.prototype.removeTable = function (t) {
        this.tableManager.select(false);
        this.rowManager.select(false);
        var idx = this.tables.indexOf(t);
        if (idx == -1) {
            return;
        }
        t.destroy();
        this.tables.splice(idx, 1);
    };
    SQL.Designer.prototype.addRelation = function (row1, row2) {
        var r = new SQL.Relation(this, row1, row2);
        this.relations.push(r);
        return r;
    };
    SQL.Designer.prototype.removeRelation = function (r) {
        var idx = this.relations.indexOf(r);
        if (idx == -1) {
            return;
        }
        r.destroy();
        this.relations.splice(idx, 1);
    };
    SQL.Designer.prototype.getCookie = function () {
        var c = document.cookie;
        var obj = {};
        var parts = c.split(';');
        for (var i = 0; i < parts.length; i++) {
            var part = parts[ i ];
            var r = part.match(/wwwsqldesigner=({.*?})/);
            if (r) {
                obj = eval('(' + r[ 1 ] + ')');
            }
        }
        return obj;
    };
    SQL.Designer.prototype.setCookie = function (obj) {
        var arr = [];
        for (var p in obj) {
            arr.push(p + ':\'' + obj[ p ] + '\'');
        }
        var str = '{' + arr.join(',') + '}';
        document.cookie = 'wwwsqldesigner=' + str + '; path=/';
    };
    SQL.Designer.prototype.getOption = function (name) {
        var c = this.getCookie();
        if (name in c) {
            return c[ name ];
        }
        switch (name) {
            case'locale':
                return CONFIG.DEFAULT_LOCALE;
            case'db':
                return CONFIG.DEFAULT_DB;
            case'staticpath':
                return CONFIG.STATIC_PATH || '';
            case'xhrpath':
                return CONFIG.XHR_PATH || '';
            case'snap':
                return 0;
            case'showsize':
                return 0;
            case'showtype':
                return 0;
            case'pattern':
                return '%R_%T';
            case'hide':
                return false;
            case'vector':
                return true;
            default:
                return null;
        }
    };
    SQL.Designer.prototype.setOption = function (name, value) {
        var obj = this.getCookie();
        obj[ name ] = value;
        this.setCookie(obj);
    };
    SQL.Designer.prototype.raise = function (table) {
        var old = table.getZ();
        var max = this.getMaxZ();
        table.setZ(max);
        for (var i = 0; i < this.tables.length; i++) {
            var t = this.tables[ i ];
            if (t == table) {
                continue;
            }
            if (t.getZ() > old) {
                t.setZ(t.getZ() - 1);
            }
        }
        var m = table.dom.mini;
        m.parentNode.appendChild(m);
    };
    SQL.Designer.prototype.clearTables = function () {
        while (this.tables.length) {
            this.removeTable(this.tables[ 0 ]);
        }
        this.setTitle(false);
    };
    SQL.Designer.prototype.alignTables = function () {
        var win = OZ.DOM.win();
        var avail = win[ 0 ] - OZ.$('bar').offsetWidth;
        var x = 10;
        var y = 10;
        var max = 0;
        this.tables.sort(function (a, b) {
            return b.getRelations().length - a.getRelations().length;
        });
        for (var i = 0; i < this.tables.length; i++) {
            var t = this.tables[ i ];
            var w = t.dom.container.offsetWidth;
            var h = t.dom.container.offsetHeight;
            if (x + w > avail) {
                x = 10;
                y += 10 + max;
                max = 0;
            }
            t.moveTo(x, y);
            x += 10 + w;
            if (h > max) {
                max = h;
            }
        }
        this.sync();
    };
    SQL.Designer.prototype.findNamedTable = function (name) {
        for (var i = 0; i < this.tables.length; i++) {
            if (this.tables[ i ].getTitle() == name) {
                return this.tables[ i ];
            }
        }
    };
    SQL.Designer.prototype.toXML = function () {
        var xml = '<?xml version="1.0" encoding="utf-8" ?>\n';
        xml += '<!-- SQL XML created by WWW SQL Designer, https://github.com/ondras/wwwsqldesigner/ -->\n';
        xml += '<!-- Active URL: ' + location.href + ' -->\n';
        xml += '<sql>\n';
        if (window.XMLSerializer) {
            var s = new XMLSerializer();
            xml += s.serializeToString(window.DATATYPES);
        } else {
            if (window.DATATYPES.xml) {
                xml += window.DATATYPES.xml;
            } else {
                alert(_('errorxml') + ': ' + e.message);
            }
        }
        for (var i = 0; i < this.tables.length; i++) {
            xml += this.tables[ i ].toXML();
        }
        xml += '</sql>\n';
        return xml;
    };
    SQL.Designer.prototype.fromXML = function (node) {
        this.clearTables();
        var types = node.getElementsByTagName('datatypes');
        if (types.length) {
            window.DATATYPES = types[ 0 ];
        }
        var tables = node.getElementsByTagName('table');
        for (var i = 0; i < tables.length; i++) {
            var t = this.addTable('', 0, 0);
            t.fromXML(tables[ i ]);
        }
        for (var i = 0; i < this.tables.length; i++) {
            this.tables[ i ].select();
            this.tables[ i ].deselect();
        }
        var rs = node.getElementsByTagName('relation');
        for (var i = 0; i < rs.length; i++) {
            var rel = rs[ i ];
            var tname = rel.getAttribute('table');
            var rname = rel.getAttribute('row');
            var t1 = this.findNamedTable(tname);
            if (!t1) {
                continue;
            }
            var r1 = t1.findNamedRow(rname);
            if (!r1) {
                continue;
            }
            tname = rel.parentNode.parentNode.getAttribute('name');
            rname = rel.parentNode.getAttribute('name');
            var t2 = this.findNamedTable(tname);
            if (!t2) {
                continue;
            }
            var r2 = t2.findNamedRow(rname);
            if (!r2) {
                continue;
            }
            this.addRelation(r1, r2);
        }
        this.sync();
    };
    SQL.Designer.prototype.setTitle = function (t) {
        document.title = this.title + (t ? ' - ' + t : '');
    };
    SQL.Designer.prototype.removeSelection = function () {
        var sel = (window.getSelection ? window.getSelection() : document.selection);
        if (!sel) {
            return;
        }
        if (sel.empty) {
            sel.empty();
        }
        if (sel.removeAllRanges) {
            sel.removeAllRanges();
        }
    };
    SQL.Designer.prototype.getTypeIndex = function (label) {
        if (!this.typeIndex) {
            this.typeIndex = {};
            var types = window.DATATYPES.getElementsByTagName('type');
            for (var i = 0; i < types.length; i++) {
                var l = types[ i ].getAttribute('label');
                if (l) {
                    this.typeIndex[ l ] = i;
                }
            }
        }
        return this.typeIndex[ label ];
    };
    SQL.Designer.prototype.getFKTypeFor = function (typeIndex) {
        if (!this.fkTypeFor) {
            this.fkTypeFor = {};
            var types = window.DATATYPES.getElementsByTagName('type');
            for (var i = 0; i < types.length; i++) {
                this.fkTypeFor[ i ] = i;
                var fk = types[ i ].getAttribute('fk');
                if (fk) {
                    this.fkTypeFor[ i ] = this.getTypeIndex(fk);
                }
            }
        }
        return this.fkTypeFor[ typeIndex ];
    };
};
CreatSQLDesigner();
